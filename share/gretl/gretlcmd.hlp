
# add Tests

Argument: 	<@var="varlist"> 
Options: 	<@lit="--lm"> (do an LM test, OLS only)
		<@lit="--quiet"> (print only the basic test result)
		<@lit="--silent"> (don't print anything)
		<@lit="--vcv"> (print covariance matrix for augmented model)
		<@lit="--both"> (IV estimation only, see below)
Examples: 	<@lit="add 5 7 9">
		<@lit="add xx yy zz --quiet">

Must be invoked after an estimation command. Performs a joint test for the addition of the specified variables to the last model, the results of which may be retrieved using the accessors <@lit="$test"> and <@lit="$pvalue">. 

By default an augmented version of the original model is estimated, including the variables in <@var="varlist">. The test is a Wald test on the augmented model, which replaces the original as the "current model" for the purposes of, for example, retrieving the residuals as <@lit="$uhat"> or doing further tests. 

Alternatively, given the <@opt="--⁠lm"> option (available only for the models estimated via OLS), an LM test is performed. An auxiliary regression is run in which the dependent variable is the residual from the last model and the independent variables are those from the last model plus <@var="varlist">. Under the null hypothesis that the added variables have no additional explanatory power, the sample size times the unadjusted R-squared from this regression is distributed as chi-square with degrees of freedom equal to the number of added regressors. In this case the original model is not replaced. 

The <@opt="--⁠both"> option is specific to two-stage least squares: it specifies that the new variables should be added both to the list of regressors and the list of instruments, the default in this case being to add to the regressors only. 

Menu path: Model window, /Tests/Add variables

# adf Tests

Arguments: 	<@var="order"> <@var="varlist"> 
Options: 	<@lit="--nc"> (test without a constant)
		<@lit="--c"> (with constant only)
		<@lit="--ct"> (with constant and trend)
		<@lit="--ctt"> (with constant, trend and trend squared)
		<@lit="--seasonals"> (include seasonal dummy variables)
		<@lit="--gls"> (de-mean or de-trend using GLS)
		<@lit="--verbose"> (print regression results)
		<@lit="--quiet"> (suppress printing of results)
		<@lit="--difference"> (use first difference of variable)
		<@lit="--test-down">[=<@var="criterion">] (automatic lag order)
Examples: 	<@lit="adf 0 y">
		<@lit="adf 2 y --nc --c --ct">
		<@lit="adf 12 y --c --test-down">
		See also <@inp="jgm-1996.inp">

The options shown above and the discussion which follows pertain to the use of the <@lit="adf"> command with regular time series data. For use of this command with panel data please see below. 

Computes a set of Dickey–Fuller tests on each of the the listed variables, the null hypothesis being that the variable in question has a unit root. (But if the <@opt="--⁠difference"> flag is given, the first difference of the variable is taken prior to testing, and the discussion below must be taken as referring to the transformed variable.) 

By default, two variants of the test are shown: one based on a regression containing a constant and one using a constant and linear trend. You can control the variants that are presented by specifying one or more of the option flags. 

In all cases the dependent variable is the first difference of the specified variable, <@itl="y">, and the key independent variable is the first lag of <@itl="y">. The model is constructed so that the coefficient on lagged <@itl="y"> equals the root in question minus 1. For example, the model with a constant may be written as 

  <@fig="adf1">

Under the null hypothesis of a unit root the coefficient on lagged <@itl="y"> equals zero; under the alternative that <@itl="y"> is stationary this coefficient is negative. 

If the lag order, <@itl="k">, is greater than 0, then <@itl="k"> lags of the dependent variable are included on the right-hand side of the test regressions. If the order is given as –1, <@itl="k"> is set following the recommendation of <@bib="Schwert (1989);schwert89">, namely 12(<@itl="T">/100)<@sup="0.25">, where <@itl="T"> is the sample size. In either case, however, if the <@opt="--⁠test-down"> option is given then <@itl="k"> is taken as the <@itl="maximum"> lag and the actual lag order used is obtained by testing down. The criterion for testing down can be selected using the option parameter, which must be one of <@lit="MAIC">, <@lit="MBIC"> or <@lit="tstat">. The MAIC and MBIC methods are as described in <@bib="Ng and Perron (2001);ng-perron01">; the lag order is chosen so as to optimize an appropriately modified version of the Akaike Information Criterion or the Schwartz Bayesian Criterion, respectively. The MAIC method is the default when no method is explicitly specified. The tstat method is a follows: 

<indent>
1. Estimate the Dickey–Fuller regression with <@itl="k"> lags of the dependent variable. 
</indent>

<indent>
2. Is the last lag significant? If so, execute the test with lag order <@itl="k">. Otherwise, let <@itl="k"> = <@itl="k"> – 1; if <@itl="k"> equals 0, execute the test with lag order 0, else go to step 1. 
</indent>

In the context of step 2 above, "significant" means that the <@itl="t">-statistic for the last lag has an asymptotic two-sided <@itl="p">-value, against the normal distribution, of 0.10 or less. 

The <@opt="--⁠gls"> option can be used in conjunction with one or other of the flags <@opt="--⁠c"> and <@opt="--⁠ct"> (the model with constant, or model with constant and trend). The effect of this option is that the de-meaning or de-trending of the variable to be tested is done using the GLS procedure suggested by <@bib="Elliott, Rothenberg and Stock (1996);ERS96">, which gives a test of greater power than the standard Dickey–Fuller approach. This option is not compatible with <@opt="--⁠nc">, <@opt="--⁠ctt"> or <@opt="--⁠seasonals">. 

<@itl="P">-values for the Dickey–Fuller tests are based on <@bib="MacKinnon (1996);mackinnon96">. The relevant code is included by kind permission of the author. In the case of the test with linear trend using GLS these <@itl="P">-values are not applicable; critical values from Table 1 in <@bib="Elliott, Rothenberg and Stock (1996);ERS96"> are shown instead. 

<@itl="Panel data"> 

When the <@lit="adf"> command is used with panel data, to produce a panel unit root test, the applicable options and the results shown are somewhat different. 

First, while you may give a list of variables for testing in the regular time-series case, with panel data only one variable may be tested per command. Second, the options governing the inclusion of deterministic terms become mutually exclusive: you must choose between no-constant, constant only, and constant plus trend; the default is constant only. In addition, the <@opt="--⁠seasonals"> option is not available. Third, the <@opt="--⁠verbose"> option has a different meaning: it produces a brief account of the test for each individual time series (the default being to show only the overall result). 

The overall test (null hypothesis: the series in question has a unit root for all the panel units) is calculated in one or both of two ways: using the method of <@bib="Im, Pesaran and Shin (Journal of Econometrics, 2003);IPS03"> or that of <@bib="Choi (Journal of International Money and Finance, 2001);choi01">. 

Menu path: /Variable/Unit root tests/Augmented Dickey-Fuller test

# anova Statistics

Arguments: 	<@var="response"> <@var="treatment"> [ <@var="block"> ] 
Option: 	<@lit="--quiet"> (don't print results)

Analysis of Variance: <@var="response"> is a series measuring some effect of interest and <@var="treatment"> must be a discrete variable that codes for two or more types of treatment (or non-treatment). For two-way ANOVA, the <@var="block"> variable (which should also be discrete) codes for the values of some control variable. 

Unless the <@opt="--⁠quiet"> option is given, this command prints a table showing the sums of squares and mean squares along with an <@itl="F">-test. The <@itl="F">-test and its P-value can be retrieved using the accessors <@lit="$test"> and <@lit="$pvalue"> respectively. 

The null hypothesis for the <@itl="F">-test is that the mean response is invariant with respect to the treatment type, or in words that the treatment has no effect. Strictly speaking, the test is valid only if the variance of the response is the same for all treatment types. 

Note that the results shown by this command are in fact a subset of the information given by the following procedure, which is easily implemented in gretl. Create a set of dummy variables coding for all but one of the treatment types. For two-way ANOVA, in addition create a set of dummies coding for all but one of the "blocks". Then regress <@var="response"> on a constant and the dummies using <@ref="ols">. For a one-way design the ANOVA table is printed via the <@opt="--⁠anova"> option to <@lit="ols">. In the two-way case the relevant <@itl="F">-test is found by using the <@ref="omit"> command. For example (assuming <@lit="y"> is the response, <@lit="xt"> codes for the treatment, and <@lit="xb"> codes for blocks): 

<code>          
   # one-way
   list dxt = dummify(xt)
   ols y 0 dxt --anova
   # two-way
   list dxb = dummify(xb)
   ols y 0 dxt dxb
   # test joint significance of dxt
   omit dxt --quiet
</code>

Menu path: /Model/Other linear models/ANOVA

# append Dataset

Argument: 	<@var="filename"> 
Option: 	<@lit="--time-series"> (see below)

Opens a data file and appends the content to the current dataset, if the new data are compatible. The program will try to detect the format of the data file (native, plain text, CSV, Gnumeric, Excel, etc.). 

The appended data may take the form of either additional observations on variables already present in the dataset, or new variables. in the case of adding variables, compatibility requires either (a) that the number of observations for the new data equals that for the current data, or (b) that the new data carries clear observation information so that gretl can work out how to place the values. 

A special feature is supported for appending to a panel dataset. Let <@itl="n"> denote the number of cross-sectional units in the panel, <@itl="T"> denote the number of time periods, and <@itl="m"> denote the number of observations for the new data. If <@itl="m = n"> the new data are taken to be time-invariant, and are copied into place for each time period. On the other hand, if <@itl="m = T"> the data are treated as non-varying across the panel units, and are copied into place for each unit. If the panel is "square", and <@itl="m"> equals both <@itl="n"> and <@itl="T">, an ambiguity arises. The default in this case is to treat the new data as time-invariant, but you can force gretl to treat the new data as time series via the <@opt="--⁠time-series"> option. (This option is ignored in all other cases.) 

See also <@ref="join"> for more sophisticated handling of multiple data sources. 

Menu path: /File/Append data

# ar Estimation

Arguments: 	<@var="lags"> ; <@var="depvar"> <@var="indepvars"> 
Option: 	<@lit="--vcv"> (print covariance matrix)
Example: 	<@lit="ar 1 3 4 ; y 0 x1 x2 x3">

Computes parameter estimates using the generalized Cochrane–Orcutt iterative procedure; see Section 9.5 of <@bib="Ramanathan (2002);ramanathan02">. Iteration is terminated when successive error sums of squares do not differ by more than 0.005 percent or after 20 iterations. 

<@var="lags"> is a list of lags in the residuals, terminated by a semicolon. In the above example, the error term is specified as 

  <@fig="arlags">

Menu path: /Model/Time series/Autoregressive estimation

# ar1 Estimation

Arguments: 	<@var="depvar"> <@var="indepvars"> 
Options: 	<@lit="--hilu"> (use Hildreth–Lu procedure)
		<@lit="--pwe"> (use Prais–Winsten estimator)
		<@lit="--vcv"> (print covariance matrix)
		<@lit="--no-corc"> (do not fine-tune results with Cochrane-Orcutt)
Examples: 	<@lit="ar1 1 0 2 4 6 7">
		<@lit="ar1 y 0 xlist --pwe">
		<@lit="ar1 y 0 xlist --hilu --no-corc">

Computes feasible GLS estimates for a model in which the error term is assumed to follow a first-order autoregressive process. 

The default method is the Cochrane–Orcutt iterative procedure; see for example section 9.4 of <@bib="Ramanathan (2002);ramanathan02">. Iteration is terminated when successive estimates of the autocorrelation coefficient do not differ by more than 0.001 or after 20 iterations. 

If the <@opt="--⁠pwe"> option is given, the Prais–Winsten estimator is used. This involves an an iteration similar to Cochrane–Orcutt; the difference is that while Cochrane–Orcutt discards the first observation, Prais–Winsten makes use of it. See, for example, Chapter 13 of <@bib="Greene (2000);greene00"> for details. 

If the <@opt="--⁠hilu"> option is given, the Hildreth–Lu search procedure is used. The results are then fine-tuned using the Cochrane–Orcutt method, unless the <@opt="--⁠no-corc"> flag is specified. The <@opt="--⁠no-corc"> option is ignored for estimators other than Hildreth–Lu. 

Menu path: /Model/Time series/AR(1)

# arbond Estimation

Argument: 	<@var="p"> [ <@var="q"> ] ; <@var="depvar"> <@var="indepvars"> [ ; <@var="instruments"> ] 
Options: 	<@lit="--quiet"> (don't show estimated model)
		<@lit="--vcv"> (print covariance matrix)
		<@lit="--two-step"> (perform 2-step GMM estimation)
		<@lit="--time-dummies"> (add time dummy variables)
		<@lit="--asymptotic"> (uncorrected asymptotic standard errors)
Examples: 	<@lit="arbond 2 ; y Dx1 Dx2">
		<@lit="arbond 2 5 ; y Dx1 Dx2 ; Dx1">
		<@lit="arbond 1 ; y Dx1 Dx2 ; Dx1 GMM(x2,2,3)">
		See also <@inp="arbond91.inp">

Carries out estimation of dynamic panel data models (that is, panel models including one or more lags of the dependent variable) using the GMM-DIF method set out by <@bib="Arellano and Bond (1991);arellano-bond91">. Please see <@ref="dpanel"> for an updated and more flexible version of this command which handles GMM-SYS as well as GMM-DIF. 

The parameter <@var="p"> represents the order of the autoregression for the dependent variable. The optional parameter <@var="q"> indicates the maximum lag of the level of the dependent variable to be used as an instrument. If this argument is omitted, or given as 0, all available lags are used. 

The dependent variable should be given in levels form; it will be automatically differenced (since this estimator uses differencing to cancel out the individual effects). The independent variables are not automatically differenced; if you want to use differences (which will generally be the case for ordinary quantitative variables, though perhaps not for, say, time dummy variables) you should create the differences first then specify these as the regressors. 

The last (optional) field in the command is for specifying instruments. If no instruments are given, it is assumed that all the independent variables are strictly exogenous. If you specify any instruments, you should include in the list any strictly exogenous independent variables. For predetermined regressors, you can use the <@lit="GMM"> function to include a specified range of lags in block-diagonal fashion. This is illustrated in the third example above. The first argument to <@lit="GMM"> is the name of the variable in question, the second is the minimum lag to be used as an instrument, and the third is the maximum lag. If the third argument is given as 0, all available lags are used. 

By default the results of 1-step estimation are reported (with robust standard errors). You may select 2-step estimation as an option. In both cases tests for autocorrelation of orders 1 and 2 are provided, as well as the Sargan overidentification test and a Wald test for the joint significance of the regressors. Note that in this differenced model first-order autocorrelation is not a threat to the validity of the model, but second-order autocorrelation violates the maintained statistical assumptions. 

In the case of 2-step estimation, standard errors are by default computed using the finite-sample correction suggested by <@bib="Windmeijer (2005);windmeijer05">. The standard asymptotic standard errors associated with the 2-step estimator are generally reckoned to be an unreliable guide to inference, but if for some reason you want to see them you can use the <@opt="--⁠asymptotic"> option to turn off the Windmeijer correction. 

If the <@opt="--⁠time-dummies"> option is given, a set of time dummy variables is added to the specified regressors. The number of dummies is one less than the maximum number of periods used in estimation, to avoid perfect collinearity with the constant. The dummies are entered in levels; if you wish to use time dummies in first-differenced form, you will have to define and add these variables manually. 

# arch Estimation

Arguments: 	<@var="order"> <@var="depvar"> <@var="indepvars"> 
Example: 	<@lit="arch 4 y 0 x1 x2 x3">

This command is retained at present for backward compatibility, but you are better off using the maximum likelihood estimator offered by the <@ref="garch"> command; for a plain ARCH model, set the first GARCH parameter to 0. 

Estimates the given model specification allowing for ARCH (Autoregressive Conditional Heteroskedasticity). The model is first estimated via OLS, then an auxiliary regression is run, in which the squared residual from the first stage is regressed on its own lagged values. The final step is weighted least squares estimation, using as weights the reciprocals of the fitted error variances from the auxiliary regression. (If the predicted variance of any observation in the auxiliary regression is not positive, then the corresponding squared residual is used instead). 

The <@lit="alpha"> values displayed below the coefficients are the estimated parameters of the ARCH process from the auxiliary regression. 

See also <@ref="garch"> and <@ref="modtest"> (the <@opt="--⁠arch"> option). 

Menu path: /Model/Time series/ARCH

# arima Estimation

Arguments: 	<@var="p"> <@var="d"> <@var="q"> [ ; <@var="P"> <@var="D"> <@var="Q"> ] <@var="depvar"> ; [ <@var="indepvars"> ] 
Options: 	<@lit="--verbose"> (print details of iterations)
		<@lit="--vcv"> (print covariance matrix)
		<@lit="--hessian"> (see below)
		<@lit="--opg"> (see below)
		<@lit="--nc"> (do not include a constant)
		<@lit="--conditional"> (use conditional maximum likelihood)
		<@lit="--x-12-arima"> (use X-12-ARIMA for estimation)
		<@lit="--lbfgs"> (use L-BFGS-B maximizer)
		<@lit="--y-diff-only"> (ARIMAX special, see below)
		<@lit="--save-ehat"> (see below)
Examples: 	<@lit="arima 1 0 2 ; y">
		<@lit="arima 2 0 2 ; y 0 x1 x2 --verbose">
		<@lit="arima 0 1 1 ; 0 1 1 ; y --nc">

If no <@var="indepvars"> list is given, estimates a univariate ARIMA (Autoregressive, Integrated, Moving Average) model. The values <@var="p">, <@var="d"> and <@var="q"> represent the autoregressive (AR) order, the differencing order, and the moving average (MA) order respectively. These values may be given in numerical form, or as the names of pre-existing scalar variables. A <@var="d"> value of 1, for instance, means that the first difference of the dependent variable should be taken before estimating the ARMA parameters. 

If you wish to include only specific AR or MA lags in the model (as opposed to all lags up to a given order) you can substitute for <@var="p"> and/or <@var="q"> either (a) the name of a pre-defined matrix containing a set of integer values or (b) an expression such as <@lit="{1,4}">; that is, a set of lags separated by commas and enclosed in braces. 

The optional integer values <@var="P">, <@var="D"> and <@var="Q"> represent the seasonal AR, order for seasonal differencing and seasonal MA order respectively. These are applicable only if the data have a frequency greater than 1 (for example, quarterly or monthly data). These orders must be given in numerical form or as scalar variables. 

In the univariate case the default is to include an intercept in the model but this can be suppressed with the <@opt="--⁠nc"> flag. If <@var="indepvars"> are added, the model becomes ARMAX; in this case the constant should be included explicitly if you want an intercept (as in the second example above). 

An alternative form of syntax is available for this command: if you do not want to apply differencing (either seasonal or non-seasonal), you may omit the <@var="d"> and <@var="D"> fields altogether, rather than explicitly entering 0. In addition, <@lit="arma"> is a synonym or alias for <@lit="arima">. Thus for example the following command is a valid way to specify an ARMA(2, 1) model: 

<code>          
   arma 2 1 ; y
</code>

The default is to use the "native" gretl ARMA functionality, with estimation by exact ML using the Kalman filter; estimation via conditional ML is available as an option. (If X-12-ARIMA is installed you have the option of using it instead of native code.) For details regarding these options, please see <@pdf="the Gretl User's Guide">. 

When the native exact ML code is used, estimated standard errors are by default based on a numerical approximation to the (negative inverse of) the Hessian, with a fallback to the outer product of the gradient (OPG) if calculation of the numerical Hessian should fail. Two (mutually exclusive) option flags can be used to force the issue: the <@opt="--⁠opg"> option forces use of the OPG method, with no attempt to compute the Hessian, while the <@opt="--⁠hessian"> flag disables the fallback to OPG. Note that failure of the numerical Hessian computation is generally an indicator of a misspecified model. 

The option <@opt="--⁠lbfgs"> is specific to estimation using native ARMA code and exact ML: it calls for use of the "limited memory" L-BFGS-B algorithm in place of the regular BFGS maximizer. This may help in some instances where convergence is difficult to achieve. 

The option <@opt="--⁠y-diff-only"> is specific to estimation of ARIMAX models (models with a non-zero order of integration and including exogenous regressors), and applies only when gretl's native exact ML is used. For such models the default behavior is to difference both the dependent variable and the regressors, but when this option is specified only the dependent variable is differenced, the regressors remaining in level form. 

The option <@opt="--⁠save-ehat"> is applicable only when using native exact ML estimation. The effect is to make available a vector holding the optimal estimate as of period <@itl="t"> of the <@itl="t">-dated disturbance or innovation: this can be retrieved via the accessor <@lit="$ehat">. These values differ from the residual series (<@lit="$uhat">), which holds the one-step ahead forecast errors. 

The AIC value given in connection with ARIMA models is calculated according to the definition used in X-12-ARIMA, namely 

  <@fig="aic">

where <@fig="ell"> is the log-likelihood and <@itl="k"> is the total number of parameters estimated. Note that X-12-ARIMA does not produce information criteria such as AIC when estimation is by conditional ML. 

The AR and MA roots shown in connection with ARMA estimation are based on the following representation of an ARMA(p, q) process: 

<mono>          
   (1 - a_1*L - a_2*L^2 - ... - a_p*L^p)Y =
          c + (1 + b_1*L + b_2*L^2 + ... + b_q*L^q) e_t
</mono>

The AR roots are therefore the solutions to 

<mono>          
         1 - a_1*z - a_2*z^2 - ... - a_p*L^p = 0
</mono>

and stability requires that these roots lie outside the unit circle. 

The "frequency" figure printed in connection with AR and MA roots is the λ value that solves <@itl="z"> = <@itl="r"> * exp(i*2*π*λ) where <@itl="z"> is the root in question and <@itl="r"> is its modulus. 

Menu path: /Model/Time series/ARIMA
Other access: Main window pop-up menu (single selection)

# biprobit Estimation

Arguments: 	<@var="depvar1"> <@var="depvar2"> <@var="indepvars1"> [ ; <@var="indepvars2"> ] 
Options: 	<@lit="--vcv"> (print covariance matrix)
		<@lit="--robust"> (robust standard errors)
		<@lit="--cluster">=<@var="clustvar"> (see <@ref="logit"> for explanation)
		<@lit="--opg"> (see below)
		<@lit="--save-xbeta"> (see below)
		<@lit="--verbose"> (print extra information)
Examples: 	<@lit="biprobit y1 y2 0 x1 x2">
		<@lit="biprobit y1 y2 0 x11 x12 ; 0 x21 x22">
		See also <@inp="biprobit.inp">

Estimates a bivariate probit model, using the Newton–Raphson method to maximize the likelihood. 

The argument list starts with the two (binary) dependent variables, followed by a list of regressors. If a second list is given, separated by a semicolon, this is interpreted as a set of regressors specific to the second equation, with <@var="indepvars1"> being specific to the first equation; otherwise <@var="indepvars1"> is taken to represent a common set of regressors. 

By default, standard errors are computed using a numerical approximation to the Hessian at convergence. But if the <@opt="--⁠opg"> option is given the covariance matrix is based on the Outer Product of the Gradient (OPG), or if the <@opt="--⁠robust"> option is given QML standard errors are calculated, using a "sandwich" of the inverse of the Hessian and the OPG. 

After successful estimation, the accessor <@lit="$uhat"> retrieves a matrix with two columns holding the generalized residuals for the two equations; that is, the expected values of the disturbances conditional on the observed outcomes and covariates. By default <@lit="$yhat"> retrieves a matrix with four columns, holding the estimated probabilities of the four possible joint outcomes for (<@itl="y"><@sub="1">, <@itl="y"><@sub="2">), in the order (1,1), (1,0), (0,1), (0,0). Alternatively, if the option <@opt="--⁠save-xbeta"> is given, <@lit="$yhat"> has two columns and holds the values of the index functions for the respective equations. 

The output includes a likelihood ratio test of the null hypothesis that the disturbances in the two equations are uncorrelated. 

# boxplot Graphs

Argument: 	<@var="varlist"> 
Options: 	<@lit="--notches"> (show 90 percent interval for median)
		<@lit="--factorized"> (see below)
		<@lit="--panel"> (see below)
		<@lit="--matrix">=<@var="name"> (plot columns of named matrix)
		<@lit="--output">=<@var="filename"> (send output to specified file)

These plots display the distribution of a variable. The central box encloses the middle 50 percent of the data, i.e. it is bounded by the first and third quartiles. The "whiskers" extend from each end of the box for a range equal to 1.5 times the interquartile range. Observations outside that range are considered outliers and represented via dots. A line is drawn across the box at the median. A "+" sign is used to indicate the mean. If the option of showing a confidence interval for the median is selected, this is computed via the bootstrap method and shown in the form of dashed horizontal lines above and/or below the median. 

The <@opt="--⁠factorized"> option allows you to examine the distribution of a chosen variable conditional on the value of some discrete factor. For example, if a data set contains wages and a gender dummy variable you can select the wage variable as the target and gender as the factor, to see side-by-side boxplots of male and female wages, as in 

<code>          
   boxplot wage gender --factorized
</code>

Note that in this case you must specify exactly two variables, with the factor given second. 

If the current data set is a panel, and just one variable is specified, the <@opt="--⁠panel"> option produces a series of side-by-side boxplots, one for each panel "unit" or group. 

Generally, the argument <@var="varlist"> is required, and refers to one or more series in the current dataset (given either by name or ID number). But if a named matrix is supplied via the <@opt="--⁠matrix"> option this argument becomes optional: by default a plot is drawn for each column of the specified matrix. 

Gretl's boxplots are generated using gnuplot, and it is possible to specify the plot more fully by appending additional gnuplot commands, enclosed in braces. For details, please see the help for the <@ref="gnuplot"> command. 

In interactive mode the result is displayed immediately. In batch mode the default behavior is that a gnuplot command file is written in the user's working directory, with a name on the pattern <@lit="gpttmpN.plt">, starting with N = <@lit="01">. The actual plots may be generated later using gnuplot (under MS Windows, wgnuplot). This behavior can be modified by use of the <@opt="--⁠output="><@var="filename"> option. For details, please see the <@ref="gnuplot"> command. 

Menu path: /View/Graph specified vars/Boxplots

# break Programming

Break out of a loop. This command can be used only within a loop; it causes command execution to break out of the current (innermost) loop. See also <@ref="loop">. 

# catch Programming

Syntax: 	<@lit="catch "><@var="command">

This is not a command in its own right but can be used as a prefix to most regular commands: the effect is to prevent termination of a script if an error occurs in executing the command. If an error does occur, this is registered in an internal error code which can be accessed as <@lit="$error"> (a zero value indicates success). The value of <@lit="$error"> should always be checked immediately after using <@lit="catch">, and appropriate action taken if the command failed. 

The <@lit="catch"> keyword cannot be used before <@lit="if">, <@lit="elif"> or <@lit="endif">. 

# chow Tests

Variants: 	<@lit="chow"> <@var="obs">
		<@lit="chow"> <@var="dummyvar"> <@lit="--dummy">
Options: 	<@lit="--dummy"> (use a pre-existing dummy variable)
		<@lit="--quiet"> (don't print estimates for augmented model)
Examples: 	<@lit="chow 25">
		<@lit="chow 1988:1">
		<@lit="chow female --dummy">

Must follow an OLS regression. If an observation number or date is given, provides a test for the null hypothesis of no structural break at the given split point. The procedure is to create a dummy variable which equals 1 from the split point specified by <@var="obs"> to the end of the sample, 0 otherwise, and also interaction terms between this dummy and the original regressors. If a dummy variable is given, tests the null hypothesis of structural homogeneity with respect to that dummy. Again, interaction terms are added. In either case an augmented regression is run including the additional terms. 

By default an <@itl="F"> statistic is calculated, taking the augmented regression as the unrestricted model and the original as the restricted. But if the original model used a robust estimator for the covariance matrix, the test statistic is a Wald chi-square value based on a robust estimator of the covariance matrix for the augmented regression. 

Menu path: Model window, /Tests/Chow test

# clear Programming

Option: 	<@lit="--dataset"> (clear dataset only)

With no options, clears all saved objects, including the current dataset if any, out of memory. Note that opening a new dataset, or using the <@lit="nulldata"> command to create an empty dataset, also has this effect, so use of <@lit="clear"> is not usually necessary. 

If the <@opt="--⁠dataset"> option is given, then only the dataset is cleared (plus any named lists of series); other saved objects such as named matrices and scalars are preserved. 

# coeffsum Tests

Argument: 	<@var="varlist"> 
Example: 	<@lit="coeffsum xt xt_1 xr_2">
		See also <@inp="restrict.inp">

Must follow a regression. Calculates the sum of the coefficients on the variables in <@var="varlist">. Prints this sum along with its standard error and the p-value for the null hypothesis that the sum is zero. 

Note the difference between this and <@ref="omit">, which tests the null hypothesis that the coefficients on a specified subset of independent variables are <@itl="all"> equal to zero. 

Menu path: Model window, /Tests/Sum of coefficients

# coint Tests

Arguments: 	<@var="order"> <@var="depvar"> <@var="indepvars"> 
Options: 	<@lit="--nc"> (do not include a constant)
		<@lit="--ct"> (include constant and trend)
		<@lit="--ctt"> (include constant and quadratic trend)
		<@lit="--skip-df"> (no DF tests on individual variables)
		<@lit="--test-down">[=<@var="criterion">] (automatic lag order)
		<@lit="--verbose"> (print extra details of regressions)
Examples: 	<@lit="coint 4 y x1 x2">
		<@lit="coint 0 y x1 x2 --ct --skip-df">

The <@bib="Engle–Granger (1987);engle-granger87"> cointegration test. The default procedure is: (1) carry out Dickey–Fuller tests on the null hypothesis that each of the variables listed has a unit root; (2) estimate the cointegrating regression; and (3) run a DF test on the residuals from the cointegrating regression. If the <@opt="--⁠skip-df"> flag is given, step (1) is omitted. 

If the specified lag order is positive all the Dickey–Fuller tests use that order, with this qualification: if the <@opt="--⁠test-down"> option is given, the given value is taken as the maximum and the actual lag order used in each case is obtained by testing down. See the <@ref="adf"> command for details of this procedure. 

By default, the cointegrating regression contains a constant. If you wish to suppress the constant, add the <@opt="--⁠nc"> flag. If you wish to augment the list of deterministic terms in the cointegrating regression with a linear or quadratic trend, add the <@opt="--⁠ct"> or <@opt="--⁠ctt"> flag. These option flags are mutually exclusive. 

<@itl="P-">values for this test are based on <@bib="MacKinnon (1996);mackinnon96">. The relevant code is included by kind permission of the author. 

Menu path: /Model/Time series/Cointegration test/Engle-Granger

# coint2 Tests

Arguments: 	<@var="order"> <@var="ylist"> [ ; <@var="xlist"> ] [ ; <@var="rxlist"> ] 
Options: 	<@lit="--nc"> (no constant)
		<@lit="--rc"> (restricted constant)
		<@lit="--uc"> (unrestricted constant)
		<@lit="--crt"> (constant and restricted trend)
		<@lit="--ct"> (constant and unrestricted trend)
		<@lit="--seasonals"> (include centered seasonal dummies)
		<@lit="--asy"> (record asymptotic p-values)
		<@lit="--quiet"> (print just the tests)
		<@lit="--silent"> (don't print anything)
		<@lit="--verbose"> (print details of auxiliary regressions)
Examples: 	<@lit="coint2 2 y x">
		<@lit="coint2 4 y x1 x2 --verbose">
		<@lit="coint2 3 y x1 x2 --rc">

Carries out the Johansen test for cointegration among the variables in <@var="ylist"> for the given lag order. For details of this test see <@pdf="the Gretl User's Guide"> or <@bib="Hamilton (1994);hamilton94">, Chapter 20. P-values are computed via Doornik's gamma approximation <@bib="(Doornik, 1998);doornik98">. Two sets of p-values are shown for the trace test, straight asymptotic values and values adjusted for the sample size. By default the <@lit="$pvalue"> accessor gets the adjusted variant, but the <@opt="--⁠asy"> flag may be used to record the asymptotic values instead. 

The inclusion of deterministic terms in the model is controlled by the option flags. The default if no option is specified is to include an "unrestricted constant", which allows for the presence of a non-zero intercept in the cointegrating relations as well as a trend in the levels of the endogenous variables. In the literature stemming from the work of Johansen (see for example his 1995 book) this is often referred to as "case 3". The first four options given above, which are mutually exclusive, produce cases 1, 2, 4 and 5 respectively. The meaning of these cases and the criteria for selecting a case are explained in <@pdf="the Gretl User's Guide">. 

The optional lists <@var="xlist"> and <@var="rxlist"> allow you to control for specified exogenous variables: these enter the system either unrestrictedly (<@var="xlist">) or restricted to the cointegration space (<@var="rxlist">). These lists are separated from <@var="ylist"> and from each other by semicolons. 

The <@opt="--⁠seasonals"> option, which may be combined with any of the other options, specifies the inclusion of a set of centered seasonal dummy variables. This option is available only for quarterly or monthly data. 

The following table is offered as a guide to the interpretation of the results shown for the test, for the 3-variable case. <@lit="H0"> denotes the null hypothesis, <@lit="H1"> the alternative hypothesis, and <@lit="c"> the number of cointegrating relations. 

<mono>          
         Rank     Trace test         Lmax test
                  H0     H1          H0     H1
         ---------------------------------------
          0      c = 0  c = 3       c = 0  c = 1
          1      c = 1  c = 3       c = 1  c = 2
          2      c = 2  c = 3       c = 2  c = 3
         ---------------------------------------
</mono>

See also the <@ref="vecm"> command. 

Menu path: /Model/Time series/Cointegration test/Johansen

# corr Statistics

Argument: 	[ <@var="varlist"> ] 
Options: 	<@lit="--uniform"> (ensure uniform sample)
		<@lit="--spearman"> (Spearman's rho)
		<@lit="--kendall"> (Kendall's tau)
		<@lit="--verbose"> (print rankings)
Examples: 	<@lit="corr y x1 x2 x3">
		<@lit="corr ylist --uniform">
		<@lit="corr x y --spearman">

By default, prints the pairwise correlation coefficients (Pearson's product-moment correlation) for the variables in <@var="varlist">, or for all variables in the data set if <@var="varlist"> is not given. The standard behavior is to use all available observations for computing each pairwise coefficient, but if the <@lit="--uniform"> option is given the sample is limited (if necessary) so that the same set of observations is used for all the coefficients. This option has an effect only if there are differing numbers of missing values for the variables used. 

The (mutually exclusive) options <@opt="--⁠spearman"> and <@opt="--⁠kendall"> produce, respectively, Spearman's rank correlation rho and Kendall's rank correlation tau in place of the default Pearson coefficient. When either of these options is given, <@var="varlist"> should contain just two variables. 

When a rank correlation is computed, the <@opt="--⁠verbose"> option can be used to print the original and ranked data (otherwise this option is ignored). 

Menu path: /View/Correlation matrix
Other access: Main window pop-up menu (multiple selection)

# corrgm Statistics

Arguments: 	<@var="series"> [ <@var="order"> ] 
Option: 	<@lit="--plot">=<@var="mode-or-filename"> (see below)
Example: 	<@lit="corrgm x 12">

Prints the values of the autocorrelation function for <@var="series">, which may be specified by name or number. The values are defined as ρ(<@itl="u"><@sub="t">, <@itl="u"><@sub="t-s">) where <@itl="u"><@sub="t"> is the <@itl="t"><@sup="th"> observation of the variable <@itl="u"> and <@itl="s"> denotes the number of lags. 

The partial autocorrelations (calculated using the Durbin–Levinson algorithm) are also shown: these are net of the effects of intervening lags. In addition the Ljung–Box <@itl="Q"> statistic is printed. This may be used to test the null hypothesis that the series is "white noise"; it is asymptotically distributed as chi-square with degrees of freedom equal to the number of lags used. 

If an <@var="order"> value is specified the length of the correlogram is limited to at most that number of lags, otherwise the length is determined automatically, as a function of the frequency of the data and the number of observations. 

By default, a plot of the correlogram is produced: a gnuplot graph in interactive mode or an ASCII graphic in batch mode. This can be adjusted via the <@opt="--⁠plot"> option. The acceptable parameters to this option are <@lit="none"> (to suppress the plot); <@lit="ascii"> (to produce a text graphic even when in interactive mode); <@lit="display"> (to produce a gnuplot graph even when in batch mode); or a file name. The effect of providing a file name is as described for the <@opt="--⁠output"> option of the <@ref="gnuplot"> command. 

Upon successful completion, the accessors <@lit="$test"> and <@lit="$pvalue"> contain the corresponding figures of the Ljung–Box test for the maximum order displayed. Note that if you just want to compute the <@itl="Q"> statistic, you'll probably want to use the <@xrf="ljungbox"> function instead. 

Menu path: /Variable/Correlogram
Other access: Main window pop-up menu (single selection)

# cusum Tests

Options: 	<@lit="--squares"> (perform the CUSUMSQ test)
		<@lit="--quiet"> (just print the Harvey–Collier test)

Must follow the estimation of a model via OLS. Performs the CUSUM test—or if the <@opt="--⁠squares"> option is given, the CUSUMSQ test—for parameter stability. A series of one-step ahead forecast errors is obtained by running a series of regressions: the first regression uses the first <@itl="k"> observations and is used to generate a prediction of the dependent variable at observation <@itl="k"> + 1; the second uses the first <@itl="k"> + 1 observations and generates a prediction for observation <@itl="k"> + 2, and so on (where <@itl="k"> is the number of parameters in the original model). 

The cumulated sum of the scaled forecast errors, or the squares of these errors, is printed and graphed. The null hypothesis of parameter stability is rejected at the 5 percent significance level if the cumulated sum strays outside of the 95 percent confidence band. 

In the case of the CUSUM test, the Harvey–Collier <@itl="t">-statistic for testing the null hypothesis of parameter stability is also printed. See Greene's <@itl="Econometric Analysis"> for details. For the CUSUMSQ test, the 95 percent confidence band is calculated using the algorithm given in <@bib="Edgerton and Wells (1994);edgerton94">. 

Menu path: Model window, /Tests/CUSUM(SQ)

# data Dataset

Argument: 	<@var="varlist"> 
Option: 	<@lit="--quiet"> (don't report results except on error)

Reads the variables in <@var="varlist"> from a database (gretl, RATS 4.0 or PcGive), which must have been opened previously using the <@ref="open"> command. The data frequency and sample range may be established via the <@ref="setobs"> and <@ref="smpl"> commands prior to using this command. Here is a full example: 

<code>          
   open macrodat.rat
   setobs 4 1959:1
   smpl ; 1999:4
   data GDP_JP GDP_UK
</code>

The commands above open a database named <@lit="macrodat.rat">, establish a quarterly data set starting in the first quarter of 1959 and ending in the fourth quarter of 1999, and then import the series named <@lit="GDP_JP"> and <@lit="GDP_UK">. 

If <@lit="setobs"> and <@lit="smpl"> are not specified in this way, the data frequency and sample range are set using the first variable read from the database. 

If the series to be read are of higher frequency than the working data set, you may specify a compaction method as below: 

<code>          
   data (compact=average) LHUR PUNEW
</code>

The four available compaction methods are "average" (takes the mean of the high frequency observations), "last" (uses the last observation), "first" and "sum". If no method is specified, the default is to use the average. 

Menu path: /File/Databases

# dataset Dataset

Arguments: 	<@var="keyword"> <@var="parameters"> 
Examples: 	<@lit="dataset addobs 24">
		<@lit="dataset insobs 10">
		<@lit="dataset compact 1">
		<@lit="dataset compact 4 last">
		<@lit="dataset expand interp">
		<@lit="dataset transpose">
		<@lit="dataset sortby x1">
		<@lit="dataset resample 500">
		<@lit="dataset renumber x 4">
		<@lit="dataset clear">

Performs various operations on the data set as a whole, depending on the given <@var="keyword">, which must be <@lit="addobs">, <@lit="insobs">, <@lit="clear">, <@lit="compact">, <@lit="expand">, <@lit="transpose">, <@lit="sortby">, <@lit="dsortby">, <@lit="resample"> or <@lit="renumber">. Note: with the exception of <@lit="clear">, these actions are not available when the dataset is currently subsampled by selection of cases on some Boolean criterion. 

<@lit="addobs">: Must be followed by a positive integer. Adds the specified number of extra observations to the end of the working dataset. This is primarily intended for forecasting purposes. The values of most variables over the additional range will be set to missing, but certain deterministic variables are recognized and extended, namely, a simple linear trend and periodic dummy variables. 

<@lit="insobs">: Must be followed by a positive integer no greater than the current number of observations. Inserts a single observation at the specified position. All subsequent data are shifted by one place and the dataset is extended by one observation. All variables apart from the constant are given missing values at the new observation. This action is not available for panel datasets. 

<@lit="clear">: No parameter required. Clears out the current data, returning gretl to its initial "empty" state. 

<@lit="compact">: Must be followed by a positive integer representing a new data frequency, which should be lower than the current frequency (for example, a value of 4 when the current frequency is 12 indicates compaction from monthly to quarterly). This command is available for time series data only; it compacts all the series in the data set to the new frequency. A second parameter may be given, namely one of <@lit="sum">, <@lit="first"> or <@lit="last">, to specify, respectively, compaction using the sum of the higher-frequency values, start-of-period values or end-of-period values. The default is to compact by averaging. 

<@lit="expand">: This command is only available for annual or quarterly time series data: annual data can be expanded to quarterly, and quarterly data to monthly frequency. By default all the series in the data set are padded out to the new frequency by repeating the existing values, but if the modifier <@lit="interp"> is appended then the series are expanded using Chow–Lin interpolation (see <@bib="Chow and Lin, 1971;chowlin71">): the regressors are a constant and quadratic trend and an AR(1) disturbance process is assumed. 

<@lit="transpose">: No additional parameter required. Transposes the current data set. That is, each observation (row) in the current data set will be treated as a variable (column), and each variable as an observation. This command may be useful if data have been read from some external source in which the rows of the data table represent variables. 

<@lit="sortby">: The name of a single series or list is required. If one series is given, the observations on all variables in the dataset are re-ordered by increasing value of the specified series. If a list is given, the sort proceeds hierarchically: if the observations are tied in sort order with respect to the first key variable then the second key is used to break the tie, and so on until the tie is broken or the keys are exhausted. Note that this command is available only for undated data. 

<@lit="dsortby">: Works as <@lit="sortby"> except that the re-ordering is by decreasing value of the key series. 

<@lit="resample">: Constructs a new dataset by random sampling, with replacement, of the rows of the current dataset. One argument is required, namely the number of rows to include. This may be less than, equal to, or greater than the number of observations in the original data. The original dataset can be retrieved via the command <@lit="smpl full">. 

<@lit="renumber">: Requires the name of an existing series followed by an integer between 1 and the number of series in the dataset minus one. Moves the specified series to the specified position in the dataset, renumbering the other series accordingly. (Position 0 is occupied by the constant, which cannot be moved.) 

Menu path: /Data

# debug Programming

Argument: 	<@var="function"> 

Experimental debugger for user-defined functions, available in the command-line program, gretlcli, and in the GUI console. The <@lit="debug"> command should be invoked after the function in question is defined but before it is called. The effect is that execution pauses when the function is called and a special prompt is shown. 

At the debugging prompt you can type <@lit="next"> to execute the next command in the function, or <@lit="continue"> to allow execution of the function to continue unimpeded. These commands can be abbreviated as <@lit="n"> and <@lit="c"> respectively. You can also interpolate an instruction at this prompt, for example a <@lit="print"> command to reveal the current value of some variable of interest. 

# delete Dataset

Argument: 	<@var="varname"> 
Options: 	<@lit="--db"> (delete series from database)
		<@lit="--type">=<@var="type-name"> (all variables of given type)

This command is an all-purpose destructor for named variables (whether series, scalars, matrices, strings or bundles). It should be used with caution; no confirmation is asked. 

In the case of series, <@var="varname"> may take the form of a named list, in which case all series in the list are deleted, or it may take the form of an explicit list of series given by name or ID number. Note that when you delete series any series with higher ID numbers than those on the deletion list will be re-numbered. 

If the <@opt="--⁠db"> option is given, this command deletes the listed series not from the current dataset but from a gretl database, assuming that a database has been opened, and the user has write permission for file in question. See also the <@ref="open"> command. 

If the <@opt="--⁠type"> option is given it must be accompanied by one of the following type-names: <@lit="matrix">, <@lit="bundle">, <@lit="string">, <@lit="list">, or <@lit="scalar">. The effect is to delete all variables of the given type. In this case (only), no <@var="varname"> argument should be given. 

Menu path: Main window pop-up (single selection)

# diff Transformations

Argument: 	<@var="varlist"> 

The first difference of each variable in <@var="varlist"> is obtained and the result stored in a new variable with the prefix <@lit="d_">. Thus <@lit="diff x y"> creates the new variables 

<mono>          
   d_x = x(t) - x(t-1)
   d_y = y(t) - y(t-1)
</mono>

Menu path: /Add/First differences of selected variables

# difftest Tests

Arguments: 	<@var="series1"> <@var="series2"> 
Options: 	<@lit="--sign"> (Sign test, the default)
		<@lit="--rank-sum"> (Wilcoxon rank-sum test)
		<@lit="--signed-rank"> (Wilcoxon signed-rank test)
		<@lit="--verbose"> (print extra output)

Carries out a nonparametric test for a difference between two populations or groups, the specific test depending on the option selected. 

With the <@opt="--⁠sign"> option, the Sign test is performed. This test is based on the fact that if two samples, <@itl="x"> and <@itl="y">, are drawn randomly from the same distribution, the probability that <@itl="x"><@sub="i"> > <@itl="y"><@sub="i">, for each observation <@itl="i">, should equal 0.5. The test statistic is <@itl="w">, the number of observations for which <@itl="x"><@sub="i"> > <@itl="y"><@sub="i">. Under the null hypothesis this follows the Binomial distribution with parameters (<@itl="n">, 0.5), where <@itl="n"> is the number of observations. 

With the <@opt="--⁠rank-sum"> option, the Wilcoxon rank-sum test is performed. This test proceeds by ranking the observations from both samples jointly, from smallest to largest, then finding the sum of the ranks of the observations from one of the samples. The two samples do not have to be of the same size, and if they differ the smaller sample is used in calculating the rank-sum. Under the null hypothesis that the samples are drawn from populations with the same median, the probability distribution of the rank-sum can be computed for any given sample sizes; and for reasonably large samples a close Normal approximation exists. 

With the <@opt="--⁠signed-rank"> option, the Wilcoxon signed-rank test is performed. This is designed for matched data pairs such as, for example, the values of a variable for a sample of individuals before and after some treatment. The test proceeds by finding the differences between the paired observations, <@itl="x"><@sub="i"> – <@itl="y"><@sub="i">, ranking these differences by absolute value, then assigning to each pair a signed rank, the sign agreeing with the sign of the difference. One then calculates <@itl="W"><@sub="+">, the sum of the positive signed ranks. As with the rank-sum test, this statistic has a well-defined distribution under the null that the median difference is zero, which converges to the Normal for samples of reasonable size. 

For the Wilcoxon tests, if the <@opt="--⁠verbose"> option is given then the ranking is printed. (This option has no effect if the Sign test is selected.) 

# discrete Transformations

Argument: 	<@var="varlist"> 
Option: 	<@lit="--reverse"> (mark variables as continuous)

Marks each variable in <@var="varlist"> as being discrete. By default all variables are treated as continuous; marking a variable as discrete affects the way the variable is handled in frequency plots, and also allows you to select the variable for the command <@ref="dummify">. 

If the <@opt="--⁠reverse"> flag is given, the operation is reversed; that is, the variables in <@var="varlist"> are marked as being continuous. 

Menu path: /Variable/Edit attributes

# dpanel Estimation

Argument: 	<@var="p"> ; <@var="depvar"> <@var="indepvars"> [ ; <@var="instruments"> ] 
Options: 	<@lit="--quiet"> (don't show estimated model)
		<@lit="--vcv"> (print covariance matrix)
		<@lit="--two-step"> (perform 2-step GMM estimation)
		<@lit="--system"> (add equations in levels)
		<@lit="--time-dummies"> (add time dummy variables)
		<@lit="--dpdstyle"> (emulate DPD package for Ox)
		<@lit="--asymptotic"> (uncorrected asymptotic standard errors)
Examples: 	<@lit="dpanel 2 ; y x1 x2">
		<@lit="dpanel 2 ; y x1 x2 --system">
		<@lit="dpanel {2 3} ; y x1 x2 ; x1">
		<@lit="dpanel 1 ; y x1 x2 ; x1 GMM(x2,2,3)">
		See also <@inp="bbond98.inp">

Carries out estimation of dynamic panel data models (that is, panel models including one or more lags of the dependent variable) using either the GMM-DIF or GMM-SYS method. 

The parameter <@var="p"> represents the order of the autoregression for the dependent variable. In the simplest case this is a scalar value, but a pre-defined matrix may be given for this argument, to specify a set of (possibly non-contiguous) lags to be used. 

The dependent variable and regressors should be given in levels form; they will be differenced automatically (since this estimator uses differencing to cancel out the individual effects). 

The last (optional) field in the command is for specifying instruments. If no instruments are given, it is assumed that all the independent variables are strictly exogenous. If you specify any instruments, you should include in the list any strictly exogenous independent variables. For predetermined regressors, you can use the <@lit="GMM"> function to include a specified range of lags in block-diagonal fashion. This is illustrated in the third example above. The first argument to <@lit="GMM"> is the name of the variable in question, the second is the minimum lag to be used as an instrument, and the third is the maximum lag. The same syntax can be used with the <@lit="GMMlevel"> function to specify GMM-type instruments for the equations in levels. 

By default the results of 1-step estimation are reported (with robust standard errors). You may select 2-step estimation as an option. In both cases tests for autocorrelation of orders 1 and 2 are provided, as well as the Sargan overidentification test and a Wald test for the joint significance of the regressors. Note that in this differenced model first-order autocorrelation is not a threat to the validity of the model, but second-order autocorrelation violates the maintained statistical assumptions. 

In the case of 2-step estimation, standard errors are by default computed using the finite-sample correction suggested by <@bib="Windmeijer (2005);windmeijer05">. The standard asymptotic standard errors associated with the 2-step estimator are generally reckoned to be an unreliable guide to inference, but if for some reason you want to see them you can use the <@opt="--⁠asymptotic"> option to turn off the Windmeijer correction. 

If the <@opt="--⁠time-dummies"> option is given, a set of time dummy variables is added to the specified regressors. The number of dummies is one less than the maximum number of periods used in estimation, to avoid perfect collinearity with the constant. The dummies are entered in differenced form unless the <@opt="--⁠dpdstyle"> option is given, in which case they are entered in levels. 

For further details and examples, please see <@pdf="the Gretl User's Guide">. 

Menu path: /Model/Panel/Dynamic panel model

# dummify Transformations

Argument: 	<@var="varlist"> 
Options: 	<@lit="--drop-first"> (omit lowest value from encoding)
		<@lit="--drop-last"> (omit highest value from encoding)

For any suitable variables in <@var="varlist">, creates a set of dummy variables coding for the distinct values of that variable. Suitable variables are those that have been explicitly marked as discrete, or those that take on a fairly small number of values all of which are "fairly round" (multiples of 0.25). 

By default a dummy variable is added for each distinct value of the variable in question. For example if a discrete variable <@lit="x"> has 5 distinct values, 5 dummy variables will be added to the data set, with names <@lit="Dx_1">, <@lit="Dx_2"> and so on. The first dummy variable will have value 1 for observations where <@lit="x"> takes on its smallest value, 0 otherwise; the next dummy will have value 1 when <@lit="x"> takes on its second-smallest value, and so on. If one of the option flags <@opt="--⁠drop-first"> or <@opt="--⁠drop-last"> is added, then either the lowest or the highest value of each variable is omitted from the encoding (which may be useful for avoiding the "dummy variable trap"). 

This command can also be embedded in the context of a regression specification. For example, the following line specifies a model where <@lit="y"> is regressed on the set of dummy variables coding for <@lit="x">. (Option flags cannot be passed to <@lit="dummify"> in this context.) 

<code>          
   ols y dummify(x)
</code>

# duration Estimation

Arguments: 	<@var="depvar"> <@var="indepvars"> [ ; <@var="censvar"> ] 
Options: 	<@lit="--exponential"> (use exponential distribution)
		<@lit="--loglogistic"> (use log-logistic distribution)
		<@lit="--lognormal"> (use log-normal distribution)
		<@lit="--medians"> (fitted values are medians)
		<@lit="--robust"> (robust (QML) standard errors)
		<@lit="--cluster">=<@var="clustvar"> (see <@ref="logit"> for explanation)
		<@lit="--vcv"> (print covariance matrix)
		<@lit="--verbose"> (print details of iterations)
Examples: 	<@lit="duration y 0 x1 x2">
		<@lit="duration y 0 x1 x2 ; cens">

Estimates a duration model: the dependent variable (which must be positive) represents the duration of some state of affairs, for example the length of spells of unemployment for a cross-section of respondents. By default the Weibull distribution is used but the exponential, log-logistic and log-normal distributions are also available. 

If some of the duration measurements are right-censored (e.g. an individual's spell of unemployment has not come to an end within the period of observation) then you should supply the trailing argument <@var="censvar">, a series in which non-zero values indicate right-censored cases. 

By default the fitted values obtained via the accessor <@lit="$yhat"> are the conditional means of the durations, but if the <@opt="--⁠medians"> option is given then <@lit="$yhat"> provides the conditional medians instead. 

Please see <@pdf="the Gretl User's Guide"> for details. 

Menu path: /Model/Limited dependent variable/Duration data...

# elif Programming

See <@ref="if">. 

# else Programming

See <@ref="if">. Note that <@lit="else"> requires a line to itself, before the following conditional command. You can append a comment, as in 

<code>          
   else # OK, do something different
</code>

But you cannot append a command, as in 

<code>          
   else x = 5 # wrong!
</code>

# end Programming

Ends a block of commands of some sort. For example, <@lit="end system"> terminates an equation <@ref="system">. 

# endif Programming

See <@ref="if">. 

# endloop Programming

Marks the end of a command loop. See <@ref="loop">. 

# eqnprint Printing

Argument: 	[ <@var="-f filename"> ] 
Option: 	<@lit="--complete"> (Create a complete document)

Must follow the estimation of a model. Prints the estimated model in the form of a LaTeX equation. If a filename is specified using the <@lit="-f"> flag output goes to that file, otherwise it goes to a file with a name of the form <@lit="equation_N.tex">, where <@lit="N"> is the number of models estimated to date in the current session. See also <@ref="tabprint">. 

If the <@opt="--⁠complete"> flag is given, the LaTeX file is a complete document, ready for processing; otherwise it must be included in a document. 

Menu path: Model window, /LaTeX

# equation Estimation

Arguments: 	<@var="depvar"> <@var="indepvars"> 
Example: 	<@lit="equation y x1 x2 x3 const">

Specifies an equation within a system of equations (see <@ref="system">). The syntax for specifying an equation within an SUR system is the same as that for, e.g., <@ref="ols">. For an equation within a Three-Stage Least Squares system you may either (a) give an OLS-type equation specification and provide a common list of instruments using the <@lit="instr"> keyword (again, see <@ref="system">), or (b) use the same equation syntax as for <@ref="tsls">. 

# estimate Estimation

Arguments: 	[ <@var="systemname"> ] [ <@var="estimator"> ] 
Options: 	<@lit="--iterate"> (iterate to convergence)
		<@lit="--no-df-corr"> (no degrees of freedom correction)
		<@lit="--geomean"> (see below)
		<@lit="--quiet"> (don't print results)
		<@lit="--verbose"> (print details of iterations)
Examples: 	<@lit="estimate "Klein Model 1" method=fiml">
		<@lit="estimate Sys1 method=sur">
		<@lit="estimate Sys1 method=sur --iterate">

Calls for estimation of a system of equations, which must have been previously defined using the <@ref="system"> command. The name of the system should be given first, surrounded by double quotes if the name contains spaces. The estimator, which must be one of <@lit="ols">, <@lit="tsls">, <@lit="sur">, <@lit="3sls">, <@lit="fiml"> or <@lit="liml">, is preceded by the string <@lit="method=">. These arguments are optional if the system in question has already been estimated and occupies the place of the "last model"; in that case the estimator defaults to the previously used value. 

If the system in question has had a set of restrictions applied (see the <@ref="restrict"> command), estimation will be subject to the specified restrictions. 

If the estimation method is <@lit="sur"> or <@lit="3sls"> and the <@opt="--⁠iterate"> flag is given, the estimator will be iterated. In the case of SUR, if the procedure converges the results are maximum likelihood estimates. Iteration of three-stage least squares, however, does not in general converge on the full-information maximum likelihood results. The <@opt="--⁠iterate"> flag is ignored for other methods of estimation. 

If the equation-by-equation estimators <@lit="ols"> or <@lit="tsls"> are chosen, the default is to apply a degrees of freedom correction when calculating standard errors. This can be suppressed using the <@opt="--⁠no-df-corr"> flag. This flag has no effect with the other estimators; no degrees of freedom correction is applied in any case. 

By default, the formula used in calculating the elements of the cross-equation covariance matrix is 

  <@fig="syssigma1">

If the <@opt="--⁠geomean"> flag is given, a degrees of freedom correction is applied: the formula is 

  <@fig="syssigma2">

where the <@itl="k">s denote the number of independent parameters in each equation. 

If the <@opt="--⁠verbose"> option is given and an iterative method is specified, details of the iterations are printed. 

# fcast Prediction

Arguments: 	[ <@var="startobs endobs"> ] [ <@var="steps-ahead"> ] [ <@var="varname"> ] 
Options: 	<@lit="--dynamic"> (create dynamic forecast)
		<@lit="--static"> (create static forecast)
		<@lit="--out-of-sample"> (generate post-sample forecast)
		<@lit="--no-stats"> (don't print forecast statistics)
		<@lit="--quiet"> (don't print anything)
		<@lit="--rolling"> (see below)
		<@lit="--plot">=<@var="filename"> (see below)
Examples: 	<@lit="fcast 1997:1 2001:4 f1">
		<@lit="fcast fit2">
		<@lit="fcast 2004:1 2008:3 4 rfcast --rolling">

Must follow an estimation command. Forecasts are generated for a certain range of observations: if <@var="startobs"> and <@var="endobs"> are given, for that range (if possible); otherwise if the <@opt="--⁠out-of-sample"> option is given, for observations following the range over which the model was estimated; otherwise over the currently defined sample range. If an out-of-sample forecast is requested but no relevant observations are available, an error is flagged. Depending on the nature of the model, standard errors may also be generated; see below. Also see below for the special effect of the <@opt="--⁠rolling"> option. 

If the last model estimated is a single equation, then the optional <@var="varname"> argument has the following effect: the forecast values are not printed, but are saved to the dataset under the given name. If the last model is a system of equations, <@var="varname"> has a different effect, namely selecting a particular endogenous variable for forecasting (the default being to produce forecasts for all the endogenous variables). In the system case, or if <@var="varname"> is not given, the forecast values can be retrieved using the accessor <@lit="$fcast">, and the standard errors, if available, via <@lit="$fcerr">. 

The choice between a static and a dynamic forecast applies only in the case of dynamic models, with an autoregressive error process or including one or more lagged values of the dependent variable as regressors. Static forecasts are one step ahead, based on realized values from the previous period, while dynamic forecasts employ the chain rule of forecasting. For example, if a forecast for <@itl="y"> in 2008 requires as input a value of <@itl="y"> for 2007, a static forecast is impossible without actual data for 2007. A dynamic forecast for 2008 is possible if a prior forecast can be substituted for <@itl="y"> in 2007. 

The default is to give a static forecast for any portion of the forecast range that lies within the sample range over which the model was estimated, and a dynamic forecast (if relevant) out of sample. The <@opt="--⁠dynamic"> option requests a dynamic forecast from the earliest possible date, and the <@opt="--⁠static"> option requests a static forecast even out of sample. 

The <@opt="--⁠rolling"> option is presently available only for single-equation models estimated via OLS. When this option is given the forecasts are recursive. That is, each forecast is generated from an estimate of the given model using data from a fixed starting point (namely, the start of the sample range for the original estimation) up to the forecast date minus <@itl="k">, where <@itl="k"> is the number of steps ahead, which must be given in the <@var="steps-ahead"> argument. The forecasts are always dynamic if this is applicable. Note that the <@var="steps-ahead"> argument should be given only in conjunction with the <@opt="--⁠rolling"> option. 

The <@opt="--⁠plot"> option (available only in the case of single-equation estimation) calls for a plot file to be produced, containing a graphical representation of the forecast. The suffix of the <@var="filename"> argument to this option controls the format of the plot: <@lit=".eps"> for EPS, <@lit=".pdf"> for PDF, <@lit=".png"> for PNG, <@lit=".plt"> for a gnuplot command file. The dummy filename <@lit="display"> can be used to force display of the plot in a window. For example, 

<code>          
   fcast --plot=fc.pdf
</code>

will generate a graphic in PDF format. Absolute pathnames are respected, otherwise files are written to the gretl working directory. 

The nature of the forecast standard errors (if available) depends on the nature of the model and the forecast. For static linear models standard errors are computed using the method outlined by <@bib="Davidson and MacKinnon (2004);davidson-mackinnon04">; they incorporate both uncertainty due to the error process and parameter uncertainty (summarized in the covariance matrix of the parameter estimates). For dynamic models, forecast standard errors are computed only in the case of a dynamic forecast, and they do not incorporate parameter uncertainty. For nonlinear models, forecast standard errors are not presently available. 

Menu path: Model window, /Analysis/Forecasts

# foreign Programming

Syntax: 	<@lit="foreign language="><@var="lang">
Options: 	<@lit="--send-data"> (pre-load the current dataset; see below)
		<@lit="--quiet"> (suppress output from foreign program)

This command opens a special mode in which commands to be executed by another program are accepted. You exit this mode with <@lit="end foreign">; at this point the stacked commands are executed. 

At present the "foreign" programs supported in this way are GNU R (<@lit="language=R">), Jurgen Doornik's Ox (<@lit="language=Ox">), GNU Octave (<@lit="language=Octave">), Python and, to a lesser extent, Stata. Language names are recognized on a case-insensitive basis. 

In connection with R, Octave and Stata the <@opt="--⁠send-data"> option has the effect of making the entire current gretl dataset available within the target program. 

See <@pdf="the Gretl User's Guide"> for details and examples. 

# fractint Statistics

Arguments: 	<@var="series"> [ <@var="order"> ] 
Options: 	<@lit="--gph"> (do Geweke and Porter-Hudak test)
		<@lit="--all"> (do both tests)
		<@lit="--quiet"> (don't print results)

Tests the specified series for fractional integration ("long memory"). The null hypothesis is that the integration order of the series is zero. By default the local Whittle estimator <@bib="(Robinson, 1995);robinson95"> is used but if the <@opt="--⁠gph"> option is given the GPH test <@bib="(Geweke and Porter-Hudak, 1983);GPH83"> is performed instead. If the <@opt="--⁠all"> flag is given then the results of both tests are printed. 

For details on this sort of test, see <@bib="Phillips and Shimotsu (2004);phillips04">. 

If the optional <@var="order"> argument is not given the order for the test(s) is set automatically as the lesser of <@itl="T">/2 and <@itl="T"><@sup="0.6">. 

The results can be retrieved using the accessors <@lit="$test"> and <@lit="$pvalue">. These values are based on the Local Whittle Estimator unless the <@opt="--⁠gph"> option is given. 

Menu path: /Variable/Unit root tests/Fractional integration

# freq Statistics

Argument: 	<@var="var"> 
Options: 	<@lit="--nbins">=<@var="n"> (specify number of bins)
		<@lit="--min">=<@var="minval"> (specify minimum, see below)
		<@lit="--binwidth">=<@var="width"> (specify bin width, see below)
		<@lit="--quiet"> (suppress printing of graph)
		<@lit="--normal"> (test for the normal distribution)
		<@lit="--gamma"> (test for gamma distribution)
		<@lit="--silent"> (don't print anything)
		<@lit="--show-plot"> (see below)
		<@lit="--matrix">=<@var="name"> (use column of named matrix)
Examples: 	<@lit="freq x">
		<@lit="freq x --normal">
		<@lit="freq x --nbins=5">
		<@lit="freq x --min=0 --binwidth=0.10">

With no options given, displays the frequency distribution for the series <@var="var"> (given by name or number), with the number of bins and their size chosen automatically. 

If the <@opt="--⁠matrix"> option is given, <@var="var"> (which must be an integer) is instead interpreted as a 1-based index that selects a column from the named matrix. 

To control the presentation of the distribution you may specify <@itl="either"> the number of bins or the minimum value plus the width of the bins, as shown in the last two examples above. The <@opt="--⁠min"> option sets the lower limit of the left-most bin. 

If the <@opt="--⁠normal"> option is given, the Doornik–Hansen chi-square test for normality is computed. If the <@opt="--⁠gamma"> option is given, the test for normality is replaced by Locke's nonparametric test for the null hypothesis that the variable follows the gamma distribution; see <@bib="Locke (1976);locke76">, <@bib="Shapiro and Chen (2001);shapiro-chen01">. Note that the parameterization of the gamma distribution used in gretl is (shape, scale). 

In interactive mode a graph of the distribution is displayed by default. The <@opt="--⁠quiet"> flag can be used to suppress this. Conversely, the graph is not usually shown when the <@lit="freq"> is used in a script, but you can force its display by giving the <@opt="--⁠show-plot"> option. (This does not apply when using the command-line program, <@lit="gretlcli">.) 

The <@opt="--⁠silent"> flag suppresses the usual output entirely. This makes sense only in conjunction with one or other of the distribution test options: the test statistic and its p-value are recorded, and can be retrieved using the accessors <@lit="$test"> and <@lit="$pvalue">. 

Menu path: /Variable/Frequency distribution

# function Programming

Argument: 	<@var="fnname"> 

Opens a block of statements in which a function is defined. This block must be closed with <@lit="end function">. Please see <@pdf="the Gretl User's Guide"> for details. 

# garch Estimation

Arguments: 	<@var="p"> <@var="q"> ; <@var="depvar"> [ <@var="indepvars"> ] 
Options: 	<@lit="--robust"> (robust standard errors)
		<@lit="--verbose"> (print details of iterations)
		<@lit="--vcv"> (print covariance matrix)
		<@lit="--nc"> (do not include a constant)
		<@lit="--stdresid"> (standardize the residuals)
		<@lit="--fcp"> (use Fiorentini, Calzolari, Panattoni algorithm)
		<@lit="--arma-init"> (initial variance parameters from ARMA)
Examples: 	<@lit="garch 1 1 ; y">
		<@lit="garch 1 1 ; y 0 x1 x2 --robust">

Estimates a GARCH model (GARCH = Generalized Autoregressive Conditional Heteroskedasticity), either a univariate model or, if <@var="indepvars"> are specified, including the given exogenous variables. The integer values <@var="p"> and <@var="q"> (which may be given in numerical form or as the names of pre-existing scalar variables) represent the lag orders in the conditional variance equation: 

  <@fig="garch_h">

The parameter <@var="p"> therefore represents the Generalized (or "AR") order, while <@var="q"> represents the regular ARCH (or "MA") order. If <@var="p"> is non-zero, <@var="q"> must also be non-zero otherwise the model is unidentified. However, you can estimate a regular ARCH model by setting <@var="q"> to a positive value and <@var="p"> to zero. The sum of <@var="p"> and <@var="q"> must be no greater than 5. Note that a constant is automatically included in the mean equation unless the <@opt="--⁠nc"> option is given. 

By default native gretl code is used in estimation of GARCH models, but you also have the option of using the algorithm of <@bib="Fiorentini, Calzolari and Panattoni (1996);fiorentini96">. The former uses the BFGS maximizer while the latter uses the information matrix to maximize the likelihood, with fine-tuning via the Hessian. 

Several variant estimators of the covariance matrix are available with this command. By default, the Hessian is used unless the <@opt="--⁠robust"> option is given, in which case the QML (White) covariance matrix is used. Other possibilities (e.g. the information matrix, or the Bollerslev–Wooldridge estimator) can be specified using the <@ref="set"> command. 

By default, the estimates of the variance parameters are initialized using the unconditional error variance from initial OLS estimation for the constant, and small positive values for the coefficients on the past values of the squared error and the error variance. The flag <@opt="--⁠arma-init"> calls for the starting values of these parameters to be set using an initial ARMA model, exploiting the relationship between GARCH and ARMA set out in Chapter 21 of Hamilton's <@itl="Time Series Analysis">. In some cases this may improve the chances of convergence. 

The GARCH residuals and estimated conditional variance can be retrieved as <@lit="$uhat"> and <@lit="$h"> respectively. For example, to get the conditional variance: 

<code>          
   series ht = $h
</code>

If the <@opt="--⁠stdresid"> option is given, the <@lit="$uhat"> values are divided by the square root of <@itl="h"><@sub="t">. 

Menu path: /Model/Time series/GARCH

# genr Dataset

Arguments: 	<@var="newvar"> <@var="= formula"> 

NOTE: this command has undergone numerous changes and enhancements since the following help text was written, so for comprehensive and updated info on this command you'll want to refer to <@pdf="the Gretl User's Guide">. On the other hand, this help does not contain anything actually erroneous, so take the following as "you have this, plus more". 

In the appropriate context, <@lit="series">, <@lit="scalar">, <@lit="matrix">, <@lit="string"> and <@lit="bundle"> are synonyms for this command. 

Creates new variables, often via transformations of existing variables. See also <@ref="diff">, <@ref="logs">, <@ref="lags">, <@ref="ldiff">, <@ref="sdiff"> and <@ref="square"> for shortcuts. In the context of a <@lit="genr"> formula, existing variables must be referenced by name, not ID number. The formula should be a well-formed combination of variable names, constants, operators and functions (described below). Note that further details on some aspects of this command can be found in <@pdf="the Gretl User's Guide">. 

A <@lit="genr"> command may yield either a series or a scalar result. For example, the formula <@lit="x2 = x * 2"> naturally yields a series if the variable <@lit="x"> is a series and a scalar if <@lit="x"> is a scalar. The formulae <@lit="x = 0"> and <@lit="mx = mean(x)"> naturally return scalars. Under some circumstances you may want to have a scalar result expanded into a series or vector. You can do this by using <@lit="series"> as an "alias" for the <@lit="genr"> command. For example, <@lit="series x = 0"> produces a series all of whose values are set to 0. You can also use <@lit="scalar"> as an alias for <@lit="genr">. It is not possible to coerce a vector result into a scalar, but use of this keyword indicates that the result <@itl="should be"> a scalar: if it is not, an error occurs. 

When a formula yields a series result, the range over which the result is written to the target variable depends on the current sample setting. It is possible, therefore, to define a series piecewise using the <@lit="smpl"> command in conjunction with <@lit="genr">. 

Supported <@itl="arithmetical operators"> are, in order of precedence: <@lit="^"> (exponentiation); <@lit="*">, <@lit="/"> and <@lit="%"> (modulus or remainder); <@lit="+"> and <@lit="-">. 

The available <@itl="Boolean operators"> are (again, in order of precedence): <@lit="!"> (negation), <@lit="&&"> (logical AND), <@lit="||"> (logical OR), <@lit=">">, <@lit="<">, <@lit="=">, <@lit=">="> (greater than or equal), <@lit="<="> (less than or equal) and <@lit="!="> (not equal). The Boolean operators can be used in constructing dummy variables: for instance <@lit="(x > 10)"> returns 1 if <@lit="x"> > 10, 0 otherwise. 

Built-in constants are <@lit="pi"> and <@lit="NA">. The latter is the missing value code: you can initialize a variable to the missing value with <@lit="scalar x = NA">. 

The <@lit="genr"> command supports a wide range of mathematical and statistical functions, including all the common ones plus several that are special to econometrics. In addition it offers access to numerous internal variables that are defined in the course of running regressions, doing hypothesis tests, and so on. For a listing of functions and accessors, see <@gfr="the Gretl function reference">. 

Besides the operators and functions noted above there are some special uses of <@lit="genr">: 

<indent>
• <@lit="genr time"> creates a time trend variable (1,2,3,…) called <@lit="time">. <@lit="genr index"> does the same thing except that the variable is called <@lit="index">. 
</indent>

<indent>
• <@lit="genr dummy"> creates dummy variables up to the periodicity of the data. In the case of quarterly data (periodicity 4), the program creates <@lit="dq1"> = 1 for first quarter and 0 in other quarters, <@lit="dq2"> = 1 for the second quarter and 0 in other quarters, and so on. With monthly data the dummies are named <@lit="dm1">, <@lit="dm2">, and so on. With other frequencies the names are <@lit="dummy_1">, <@lit="dummy_2">, etc. 
</indent>

<indent>
• <@lit="genr unitdum"> and <@lit="genr timedum"> create sets of special dummy variables for use with panel data. The first codes for the cross-sectional units and the second for the time period of the observations. 
</indent>

<@itl="Note">: In the command-line program, <@lit="genr"> commands that retrieve model-related data always reference the model that was estimated most recently. This is also true in the GUI program, if one uses <@lit="genr"> in the "gretl console" or enters a formula using the "Define new variable" option under the Add menu in the main window. With the GUI, however, you have the option of retrieving data from any model currently displayed in a window (whether or not it's the most recent model). You do this under the "Save" menu in the model's window. 

The special variable <@lit="obs"> serves as an index of the observations. For instance <@lit="genr dum = (obs=15)"> will generate a dummy variable that has value 1 for observation 15, 0 otherwise. You can also use this variable to pick out particular observations by date or name. For example, <@lit="genr d = (obs>1986:4)">, <@lit="genr d = (obs>"2008-04-01")">, or <@lit="genr d = (obs="CA")">. If daily dates or observation labels are used in this context, they should be enclosed in double quotes. Quarterly and monthly dates (with a colon) may be used unquoted. Note that in the case of annual time series data, the year is not distinguishable syntactically from a plain integer; therefore if you wish to compare observations against <@lit="obs"> by year you must use the function <@lit="obsnum"> to convert the year to a 1-based index value, as in <@lit="genr d = (obs>obsnum(1986))">. 

Scalar values can be pulled from a series in the context of a <@lit="genr"> formula, using the syntax <@var="varname"><@lit="["><@var="obs"><@lit="]">. The <@var="obs"> value can be given by number or date. Examples: <@lit="x[5]">, <@lit="CPI[1996:01]">. For daily data, the form <@var="YYYY-MM-DD"> should be used, e.g. <@lit="ibm[1970-01-23]">. 

An individual observation in a series can be modified via <@lit="genr">. To do this, a valid observation number or date, in square brackets, must be appended to the name of the variable on the left-hand side of the formula. For example, <@lit="genr x[3] = 30"> or <@lit="genr x[1950:04] = 303.7">. 

Menu path: /Add/Define new variable
Other access: Main window pop-up menu

# gmm Estimation

Options: 	<@lit="--two-step"> (two step estimation)
		<@lit="--iterate"> (iterated GMM)
		<@lit="--vcv"> (print covariance matrix)
		<@lit="--verbose"> (print details of iterations)
		<@lit="--lbfgs"> (use L-BFGS-B instead of regular BFGS)

Performs Generalized Method of Moments (GMM) estimation using the BFGS (Broyden, Fletcher, Goldfarb, Shanno) algorithm. You must specify one or more commands for updating the relevant quantities (typically GMM residuals), one or more sets of orthogonality conditions, an initial matrix of weights, and a listing of the parameters to be estimated, all enclosed between the tags <@lit="gmm"> and <@lit="end gmm">. Any options should be appended to the <@lit="end gmm"> line. 

Please see <@pdf="the Gretl User's Guide"> for details on this command. Here we just illustrate with a simple example. 

<code>          
   gmm e = y - X*b
     orthog e ; W
     weights V
     params b
   end gmm
</code>

In the example above we assume that <@lit="y"> and <@lit="X"> are data matrices, <@lit="b"> is an appropriately sized vector of parameter values, <@lit="W"> is a matrix of instruments, and <@lit="V"> is a suitable matrix of weights. The statement 

<code>          
   orthog e ; W
</code>

indicates that the residual vector <@lit="e"> is in principle orthogonal to each of the instruments composing the columns of <@lit="W">. 

Menu path: /Model/GMM

# gnuplot Graphs

Arguments: 	<@var="yvars"> <@var="xvar"> [ <@var="dumvar"> ] 
Options: 	<@lit="--with-lines">[=<@var="varspec">] (use lines, not points)
		<@lit="--with-lp">[=<@var="varspec">] (use lines and points)
		<@lit="--with-impulses">[=<@var="varspec">] (use vertical lines)
		<@lit="--time-series"> (plot against time)
		<@lit="--suppress-fitted"> (don't show fitted line)
		<@lit="--single-yaxis"> (force use of just one y-axis)
		<@lit="--linear-fit"> (show least squares fit)
		<@lit="--inverse-fit"> (show inverse fit)
		<@lit="--quadratic-fit"> (show quadratic fit)
		<@lit="--cubic-fit"> (show cubic fit)
		<@lit="--loess-fit"> (show loess fit)
		<@lit="--semilog-fit"> (show semilog fit)
		<@lit="--dummy"> (see below)
		<@lit="--matrix">=<@var="name"> (plot columns of named matrix)
		<@lit="--output">=<@var="filename"> (send output to specified file)
		<@lit="--input">=<@var="filename"> (take input from specified file)
Examples: 	<@lit="gnuplot y1 y2 x">
		<@lit="gnuplot x --time-series --with-lines">
		<@lit="gnuplot wages educ gender --dummy">
		<@lit="gnuplot y1 y2 x --with-lines=y2">

The variables in the list <@var="yvars"> are graphed against <@var="xvar">. For a time series plot you may either give <@lit="time"> as <@var="xvar"> or use the option flag <@opt="--⁠time-series">. 

By default, data-points are shown as points; this can be overridden by giving one of the options <@opt="--⁠with-lines">, <@opt="--⁠with-lp"> or <@opt="--⁠with-impulses">. If more than one variable is to be plotted on the <@itl="y"> axis, the effect of these options may be confined to a subset of the variables by using the <@var="varspec"> parameter. This should take the form of a comma-separated listing of the names or numbers of the variables to be plotted with lines or impulses respectively. For instance, the final example above shows how to plot <@lit="y1"> and <@lit="y2"> against <@lit="x">, such that <@lit="y2"> is represented by a line but <@lit="y1"> by points. 

If the <@opt="--⁠dummy"> option is selected, exactly three variables should be given: a single <@itl="y"> variable, an <@itl="x"> variable, and <@var="dvar">, a discrete variable. The effect is to plot <@var="yvar"> against <@var="xvar"> with the points shown in different colors depending on the value of <@var="dvar"> at the given observation. 

Generally, the arguments <@var="yvars"> and <@var="xvar"> are required, and refer to series in the current dataset (given either by name or ID number). But if a named matrix is supplied via the <@opt="--⁠matrix"> option these arguments become optional: if the specified matrix has <@itl="k"> columns, by default the first <@itl="k"> – 1 columns are treated as the <@var="yvars"> and the last column as <@var="xvar">. If the <@opt="--⁠time-series"> option is given, however, all <@itl="k"> columns are plotted against time. If you wish to plot selected columns of the matrix, you should specify <@var="yvars"> and <@var="xvar"> in the form of 1-based column numbers. For example if you want a scatterplot of column 2 of matrix <@lit="M"> against column 1, you can do: 

<code>          
   gnuplot 2 1 --matrix=M
</code>

In interactive mode the plot is displayed immediately. In batch mode the default behavior is that a gnuplot command file is written in the user's working directory, with a name on the pattern <@lit="gpttmpN.plt">, starting with N = <@lit="01">. The actual plots may be generated later using gnuplot (under MS Windows, wgnuplot). This behavior can be modified by use of the <@opt="--⁠output="><@var="filename"> option. This option controls the filename used, and at the same time allows you to specify a particular output format via the three-letter extension of the file name, as follows: <@lit=".eps"> results in the production of an Encapsulated PostScript (EPS) file; <@lit=".pdf"> produces PDF; <@lit=".png"> produces PNG format, <@lit=".emf"> calls for EMF (Enhanced MetaFile), <@lit=".fig"> calls for an Xfig file, and <@lit=".svg"> for SVG (Scalable Vector Graphics). If the dummy filename "<@lit="display">" is given then the plot is shown on screen as in interactive mode. If a filename with any extension other than those just mentioned is given, a gnuplot command file is written. 

The various "fit" options are applicable only for bivariate scatterplots and single time-series plots. The default behavior for a scatterplot is to show the OLS fit if the slope coefficient is significant at the 10 percent level; this can be suppressed via the <@opt="--⁠suppress-fitted"> option. The default behavior for time-series is not to show a fitted line. If the <@opt="--⁠linear"> option is given, the OLS line is shown regardless of whether or not it is significant. The other fit options (<@opt="--⁠inverse">, <@opt="--⁠quadratic">, <@opt="--⁠cubic">, <@opt="--⁠loess"> and <@opt="--⁠semilog">) produce respectively an inverse fit (regression of <@itl="y"> on 1/<@itl="x">), a quadratic fit, a cubic fit, a loess fit, and a semilog fit. Loess (also sometimes called "lowess") is a robust locally weighted regression. By semilog, we mean a regression of log <@itl="y"> on <@itl="x"> (or time); the fitted line represents the conditional expectation of <@itl="y">, obtained by exponentiation. 

A further option to this command is available: following the specification of the variables to be plotted and the option flag (if any), you may add literal gnuplot commands to control the appearance of the plot (for example, setting the plot title and/or the axis ranges). These commands should be enclosed in braces, and each gnuplot command must be terminated with a semi-colon. A backslash may be used to continue a set of gnuplot commands over more than one line. Here is an example of the syntax: 

<code>          
   { set title 'My Title'; set yrange [0:1000]; }
</code>

Menu path: /View/Graph specified vars
Other access: Main window pop-up menu, graph button on toolbar

# graphpg Graphs

Variants: 	<@lit="graphpg add">
		<@lit="graphpg fontscale "><@var="value">
		<@lit="graphpg show">
		<@lit="graphpg free">
		<@lit="graphpg --output="><@var="filename">

The session "graph page" will work only if you have the LaTeX typesetting system installed, and are able to generate and view PDF or PostScript output. 

In the session icon window, you can drag up to eight graphs onto the graph page icon. When you double-click on the graph page (or right-click and select "Display"), a page containing the selected graphs will be composed and opened in a suitable viewer. From there you should be able to print the page. 

To clear the graph page, right-click on its icon and select "Clear". 

Note that on systems other than MS Windows, you may have to adjust the setting for the program used to view PDF or PostScript files. Find that under the "Programs" tab in the gretl Preferences dialog box (under the Tools menu in the main window). 

It's also possible to operate on the graph page via script, or using the console (in the GUI program). The following commands and options are supported: 

To add a graph to the graph page, issue the command <@lit="graphpg add"> after saving a named graph, as in 

<code>          
   grf1 <- gnuplot Y X
   graphpg add
</code>

To display the graph page: <@lit="graphpg show">. 

To clear the graph page: <@lit="graphpg free">. 

To adjust the scale of the font used in the graph page, use <@lit="graphpg fontscale"> <@var="scale">, where <@var="scale"> is a multiplier (with a default of 1.0). Thus to make the font size 50 percent bigger than the default you can do 

<code>          
   graphpg fontscale 1.5
</code>

To call for printing of the graph page to file, use the flag <@opt="--⁠output="> plus a filename; the filename should have the suffix "<@lit=".pdf">", "<@lit=".ps">" or "<@lit=".eps">". For example: 

<code>          
   graphpg --output="myfile.pdf"
</code>

In this context the output uses colored lines by default; to use dot/dash patterns instead of colors you can append the <@opt="--⁠monochrome"> flag. 

# hausman Tests

This test is available only after estimating an OLS model using panel data (see also <@lit="setobs">). It tests the simple pooled model against the principal alternatives, the fixed effects and random effects models. 

The fixed effects model allows the intercept of the regression to vary across the cross-sectional units. An <@itl="F">-test is reported for the null hypotheses that the intercepts do not differ. The random effects model decomposes the residual variance into two parts, one part specific to the cross-sectional unit and the other specific to the particular observation. (This estimator can be computed only if the number of cross-sectional units in the data set exceeds the number of parameters to be estimated.) The Breusch–Pagan LM statistic tests the null hypothesis that the pooled OLS estimator is adequate against the random effects alternative. 

The pooled OLS model may be rejected against both of the alternatives, fixed effects and random effects. Provided the unit- or group-specific error is uncorrelated with the independent variables, the random effects estimator is more efficient than the fixed effects estimator; otherwise the random effects estimator is inconsistent and the fixed effects estimator is to be preferred. The null hypothesis for the Hausman test is that the group-specific error is not so correlated (and therefore the random effects model is preferable). A low p-value for this test counts against the random effects model and in favor of fixed effects. 

Menu path: Model window, /Tests/Panel diagnostics

# heckit Estimation

Arguments: 	<@var="depvar"> <@var="indepvars"> ; <@var="selection equation"> 
Options: 	<@lit="--quiet"> (suppress printing of results)
		<@lit="--robust"> (QML standard errors)
		<@lit="--two-step"> (perform two-step estimation)
		<@lit="--vcv"> (print covariance matrix)
		<@lit="--verbose"> (print extra output)
Example: 	<@lit="heckit y 0 x1 x2 ; ys 0 x3 x4">
		See also <@inp="heckit.inp">

Heckman-type selection model. In the specification, the list before the semicolon represents the outcome equation, and the second list represents the selection equation. The dependent variable in the selection equation (<@lit="ys"> in the example above) must be a binary variable. 

By default, the parameters are estimated by maximum likelihood. The covariance matrix of the parameters is computed using the negative inverse of the Hessian. If two-step estimation is desired, use the <@opt="--⁠two-step"> option. In this case, the covariance matrix of the parameters of the outcome equation is appropriately adjusted as per <@bib="Heckman (1979);heckman79">. 

Please note that in ML estimation a numerical approximation of the Hessian is used; this may lead to inaccuracies in the estimated covariance matrix if the scale of the explanatory variables is such that some of the estimated coefficients are very small in absolute value. This problem will be addressed in future versions; in the meantime, rescaling the offending explanatory variable(s) can be used as a workaround. 

Menu path: /Model/Limited dependent variable/Heckit

# help Utilities

Variants: 	<@lit="help">
		<@lit="help functions">
		<@lit="help"> <@var="command">
		<@lit="help"> <@var="function">
Option: 	<@lit="--func"> (select functions help)

If no arguments are given, prints a list of available commands. If the single argument <@lit="functions"> is given, prints a list of available functions (see <@ref="genr">). 

<@lit="help"> <@var="command"> describes <@var="command"> (e.g. <@lit="help smpl">). <@lit="help"> <@var="function"> describes <@var="function"> (e.g. <@lit="help ldet">). Some functions have the same names as related commands (e.g. <@lit="diff">): in that case the default is to print help for the command, but you can get help on the function by using the <@opt="--⁠func"> option. 

Menu path: /Help

# hsk Estimation

Arguments: 	<@var="depvar"> <@var="indepvars"> 
Option: 	<@lit="--vcv"> (print covariance matrix)

This command is applicable where heteroskedasticity is present in the form of an unknown function of the regressors which can be approximated by a quadratic relationship. In that context it offers the possibility of consistent standard errors and more efficient parameter estimates as compared with OLS. 

The procedure involves (a) OLS estimation of the model of interest, followed by (b) an auxiliary regression to generate an estimate of the error variance, then finally (c) weighted least squares, using as weight the reciprocal of the estimated variance. 

In the auxiliary regression (b) we regress the log of the squared residuals from the first OLS on the original regressors and their squares. The log transformation is performed to ensure that the estimated variances are non-negative. Call the fitted values from this regression <@itl="u"><@sup="*">. The weight series for the final WLS is then formed as 1/exp(<@itl="u"><@sup="*">). 

Menu path: /Model/Other linear models/Heteroskedasticity corrected

# hurst Statistics

Argument: 	<@var="series"> 

Calculates the Hurst exponent (a measure of persistence or long memory) for a time-series variable having at least 128 observations. 

The Hurst exponent is discussed by Mandelbrot. In theoretical terms it is the exponent, <@itl="H">, in the relationship 

  <@fig="hurst">

where RS is the "rescaled range" of the variable <@itl="x"> in samples of size <@itl="n"> and <@itl="a"> is a constant. The rescaled range is the range (maximum minus minimum) of the cumulated value or partial sum of <@itl="x"> over the sample period (after subtraction of the sample mean), divided by the sample standard deviation. 

As a reference point, if <@itl="x"> is white noise (zero mean, zero persistence) then the range of its cumulated "wandering" (which forms a random walk), scaled by the standard deviation, grows as the square root of the sample size, giving an expected Hurst exponent of 0.5. Values of the exponent significantly in excess of 0.5 indicate persistence, and values less than 0.5 indicate anti-persistence (negative autocorrelation). In principle the exponent is bounded by 0 and 1, although in finite samples it is possible to get an estimated exponent greater than 1. 

In gretl, the exponent is estimated using binary sub-sampling: we start with the entire data range, then the two halves of the range, then the four quarters, and so on. For sample sizes smaller than the data range, the RS value is the mean across the available samples. The exponent is then estimated as the slope coefficient in a regression of the log of RS on the log of sample size. 

Menu path: /Variable/Hurst exponent

# if Programming

Flow control for command execution. Three sorts of construction are supported, as follows. 

<code>          
   # simple form
   if condition
       commands
   endif
   # two branches
   if condition
       commands1
   else
       commands2
        endif
   # three or more branches
   if condition1
       commands1
   elif condition2
       commands2
   else
       commands3
   endif
</code>

<@var="condition"> must be a Boolean expression, for the syntax of which see <@ref="genr">. More than one <@lit="elif"> block may be included. In addition, <@lit="if"> … <@lit="endif"> blocks may be nested. 

# include Programming

Argument: 	<@var="filename"> 
Examples: 	<@lit="include myfile.inp">
		<@lit="include sols.gfn">

Intended for use in a command script, primarily for including definitions of functions. Executes the commands in <@var="filename"> then returns control to the main script. To include a packaged function, be sure to include the filename extension. 

See also <@ref="run">. 

# info Dataset

Prints out any supplementary information stored with the current datafile. 

Menu path: /Data/Dataset info
Other access: Data browser windows

# intreg Estimation

Arguments: 	<@var=""> <@var="minvar"> <@var="maxvar"> <@var="indepvars"> 
Options: 	<@lit="--quiet"> (suppress printing of results)
		<@lit="--verbose"> (print details of iterations)
		<@lit="--robust"> (robust standard errors)
		<@lit="--cluster">=<@var="clustvar"> (see <@ref="logit"> for explanation)
Example: 	<@lit="intreg lo hi const x1 x2">
		See also <@inp="wtp.inp">

Estimates an interval regression model. This model arises when the dependent variable is imperfectly observed for some (possibly all) observations. In other words, the data generating process is assumed to be 

  <@itl="y* = x b + u">

but we only observe <@itl="m <= y* <= M"> (the interval may be left- or right-unbounded). Note that for some observations <@itl="m"> may equal <@itl="M">. The variables <@var="minvar"> and <@var="maxvar"> must contain <@lit="NA">s for left- and right-unbounded observations, respectively. 

The model is estimated by maximum likelihood, assuming normality of the disturbance term. 

By default, standard errors are computed using the negative inverse of the Hessian. If the <@opt="--⁠robust"> flag is given, then QML or Huber–White standard errors are calculated instead. In this case the estimated covariance matrix is a "sandwich" of the inverse of the estimated Hessian and the outer product of the gradient. 

Menu path: /Model/Limited dependent variable/Interval regression

# join Dataset

Arguments: 	<@var="filename"> <@var="varname"> 
Options: 	<@lit="--data">=<@var="column-name"> (see below)
		<@lit="--filter">=<@var="expression"> (see below)
		<@lit="--ikey">=<@var="inner-key"> (see below)
		<@lit="--okey">=<@var="outer-key"> (see below)
		<@lit="--aggr">=<@var="method"> (see below)
		<@lit="--tkey">=<@var="column-name,format-string"> (see below)

This command imports a data series from the source <@var="filename"> (which must be a delimited text data file) under the name <@var="varname">. For details please see <@pdf="the Gretl User's Guide">; here we just give a brief summary of the available options. 

The <@opt="--⁠data"> option can be used to specify the column heading of the data in the source file, if this differs from the name by which the data should be known in gretl. 

The <@opt="--⁠filter"> option can be used to specify a criterion for filtering the source data (that is, selecting a subset of observations). 

The <@opt="--⁠ikey"> and <@opt="--⁠okey"> options can be used to specify a mapping between observations in the current dataset and observations in the source data (for example, individuals can be matched against the household to which they belong). 

The <@opt="--⁠aggr"> option is used when the mapping between observations in the current dataset and the source is not one-to-one. 

The <@opt="--⁠tkey"> option is applicable only when the current dataset has a time-series structure. It can be used to specify the name of a column containing dates to be matched to the dataset and/or the format in which dates are represented in that column. 

See also <@ref="append"> for simpler joining operations. 

# kalman Estimation

Options: 	<@lit="--cross"> (allow for cross-correlated disturbances)
		<@lit="--diffuse"> (use diffuse initialization)

Opens a block of statements to set up a Kalman filter. This block should end with the line <@lit="end kalman">, to which the options shown above may be appended. The intervening lines specify the matrices that compose the filter. For example, 

<code>          
   kalman 
     obsy y
     obsymat H
     statemat F
     statevar Q
   end kalman
</code>

Please see <@pdf="the Gretl User's Guide"> for details. 

See also <@xrf="kfilter">, <@xrf="ksimul">, <@xrf="ksmooth">. 

# kpss Tests

Arguments: 	<@var="order"> <@var="varlist"> 
Options: 	<@lit="--trend"> (include a trend)
		<@lit="--seasonals"> (include seasonal dummies)
		<@lit="--verbose"> (print regression results)
		<@lit="--quiet"> (suppress printing of results)
		<@lit="--difference"> (use first difference of variable)
Examples: 	<@lit="kpss 8 y">
		<@lit="kpss 4 x1 --trend">

For use of this command with panel data please see the final section in this entry. 

Computes the KPSS test <@bib="(Kwiatkowski et al, Journal of Econometrics, 1992);KPSS92"> for stationarity, for each of the specified variables (or their first difference, if the <@opt="--⁠difference"> option is selected). The null hypothesis is that the variable in question is stationary, either around a level or, if the <@opt="--⁠trend"> option is given, around a deterministic linear trend. 

The order argument determines the size of the window used for Bartlett smoothing. If the <@opt="--⁠verbose"> option is chosen the results of the auxiliary regression are printed, along with the estimated variance of the random walk component of the variable. 

The critical values shown for the test statistic are based on the response surfaces estimated by <@bib="Sephton (Economics Letters, 1995);sephton95">, which are more accurate for small samples than the values given in the original KPSS article. When the test statistic lies between the 10 percent and 1 percent critical values a p-value is shown; this is obtained by linear interpolation and should not be taken too literally. 

<@itl="Panel data"> 

When the <@lit="kpss"> command is used with panel data, to produce a panel unit root test, the applicable options and the results shown are somewhat different. While you may give a list of variables for testing in the regular time-series case, with panel data only one variable may be tested per command. And the <@opt="--⁠verbose"> option has a different meaning: it produces a brief account of the test for each individual time series (the default being to show only the overall result). 

When possible, the overall test (null hypothesis: the series in question is stationary for all the panel units) is calculated using the method of <@bib="Choi (Journal of International Money and Finance, 2001);choi01">. This is not always straightforward, the difficulty being that while the Choi test is based on the p-values of the tests on the individual series, we do not currently have a means of calculating p-values for the KPSS test statistic; we must rely on a few critical values. 

If the test statistic for a given series falls between the 10 percent and 1 percent critical values, we are able to interpolate a p-value. But if the test falls short of the 10 percent value, or exceeds the 1 percent value, we cannot interpolate and can at best place a bound on the global Choi test. If the individual test statistic falls short of the 10 percent value for some units but exceeds the 1 percent value for others, we cannot even compute a bound for the global test. 

Menu path: /Variable/Unit root tests/KPSS test

# labels Dataset

Variants: 	<@lit="labels ["> <@var="varlist"> <@lit="]">
		<@lit="labels --to-file="><@var="filename">
		<@lit="labels --from-file="><@var="filename">
		<@lit="labels --delete">

In the first form, prints out the informative labels (if present) for the series in <@var="varlist">, or for all series in the dataset if <@var="varlist"> is not specified. 

With the option <@opt="--⁠to-file">, writes to the named file the labels for all series in the dataset, one per line. If no labels are present an error is flagged; if some series have labels and others do not, a blank line is printed for series with no label. 

With the option <@opt="--⁠from-file">, reads the specified file (which should be plain text) and assigns labels to the series in the dataset, reading one label per line and taking blank lines to indicate blank labels. 

The <@opt="--⁠delete"> option does what you'd expect: it removes all the series labels from the dataset. 

Menu path: /Data/Variable labels

# lad Estimation

Arguments: 	<@var="depvar"> <@var="indepvars"> 
Option: 	<@lit="--vcv"> (print covariance matrix)

Calculates a regression that minimizes the sum of the absolute deviations of the observed from the fitted values of the dependent variable. Coefficient estimates are derived using the Barrodale–Roberts simplex algorithm; a warning is printed if the solution is not unique. 

Standard errors are derived using the bootstrap procedure with 500 drawings. The covariance matrix for the parameter estimates, printed when the <@opt="--⁠vcv"> flag is given, is based on the same bootstrap. 

Menu path: /Model/Robust estimation/Least Absolute Deviation

# lags Transformations

Arguments: 	[ <@var="order"> ; ] <@var="laglist"> 
Examples: 	<@lit="lags x y">
		<@lit="lags 12 ; x y">

Creates new series which are lagged values of each of the series in <@var="varlist">. By default the number of lags created equals the periodicity of the data. For example, if the periodicity is 4 (quarterly), the command <@lit="lags x"> creates 

<mono>          
   x_1 = x(t-1)
   x_2 = x(t-2)
   x_3 = x(t-3)
   x_4 = x(t-4)
</mono>

The number of lags created can be controlled by the optional first parameter (which, if present, must be followed by a semicolon). 

Menu path: /Add/Lags of selected variables

# ldiff Transformations

Argument: 	<@var="varlist"> 

The first difference of the natural log of each series in <@var="varlist"> is obtained and the result stored in a new series with the prefix <@lit="ld_">. Thus <@lit="ldiff x y"> creates the new variables 

<mono>          
   ld_x = log(x) - log(x(-1))
   ld_y = log(y) - log(y(-1))
</mono>

Menu path: /Add/Log differences of selected variables

# leverage Tests

Options: 	<@lit="--save"> (save variables)
		<@lit="--quiet"> (don't print results)

Must follow an <@lit="ols"> command. Calculates the leverage (<@itl="h">, which must lie in the range 0 to 1) for each data point in the sample on which the previous model was estimated. Displays the residual (<@itl="u">) for each observation along with its leverage and a measure of its influence on the estimates, <@itl="uh">/(1 – <@itl="h">). "Leverage points" for which the value of <@itl="h"> exceeds 2<@itl="k">/<@itl="n"> (where <@itl="k"> is the number of parameters being estimated and <@itl="n"> is the sample size) are flagged with an asterisk. For details on the concepts of leverage and influence see <@bib="Davidson and MacKinnon (1993);davidson-mackinnon93">, Chapter 2. 

DFFITS values are also computed: these are "studentized residuals" (predicted residuals divided by their standard errors) multiplied by <@fig="dffit">. For discussions of studentized residuals and DFFITS see chapter 12 of <@bib="Maddala's Introduction to Econometrics;maddala92"> or <@bib="Belsley, Kuh and Welsch (1980);belsley-etal80">. 

Briefly, a "predicted residual" is the difference between the observed value of the dependent variable at observation <@itl="t">, and the fitted value for observation <@itl="t"> obtained from a regression in which that observation is omitted (or a dummy variable with value 1 for observation <@itl="t"> alone has been added); the studentized residual is obtained by dividing the predicted residual by its standard error. 

If the <@opt="--⁠save"> flag is given with this command, then the leverage, influence and DFFITS values are added to the current data set. In that context the <@opt="--⁠quiet"> flag may be used to suppress the printing of results. 

After execution, the <@lit="$test"> accessor returns the cross-validation criterion, which is defined as the sum of squared deviations of the dependent variable from its forecast value, the forecast for each observation being based on a sample from which that observation is excluded. (This is known as the <@itl="leave-one-out"> estimator). For a broader discussion of the cross-validation criterion, see Davidson and MacKinnon's <@itl="Econometric Theory and Methods">, pages 685–686, and the references therein. 

Menu path: Model window, /Tests/Influential observations

# levinlin Tests

Arguments: 	<@var="order"> <@var="series"> 
Options: 	<@lit="--nc"> (test without a constant)
		<@lit="--ct"> (with constant and trend)
		<@lit="--quiet"> (suppress printing of results)
Examples: 	<@lit="levinlin 0 y">
		<@lit="levinlin 2 y --ct">
		<@lit="levinlin {2,2,3,3,4,4} y">

Carries out the panel unit-root test described by <@bib="Levin, Lin and Chu (2002);LLC2002">. The null hypothesis is that all of the individual time series exhibit a unit root, and the alternative is that none of the series has a unit root. (That is, a common AR(1) coefficient is assumed, although in other respects the statistical properties of the series are allowed to vary across individuals.) 

By default the test ADF regressions include a constant; to suppress the constant use the <@opt="--⁠nc"> option, or to add a linear trend use the <@opt="--⁠ct"> option. (See the <@ref="adf"> command for explanation of ADF regressions.) 

The (non-negative) <@var="order"> for the test (governing the number of lags of the dependent variable to include in the ADF regressions) may be given in either of two forms. If a scalar value is given, this is applied to all the individuals in the panel. The alternative is to provide a matrix containing a specific lag order for each individual; this must be a vector with as many elements as there are individuals in the current sample range. Such a matrix can be specified by name, or constructed using braces as illustrated in the last example above. 

Menu path: /Variable/Unit root tests/Levin-Lin-Chu test

# logistic Estimation

Arguments: 	<@var="depvar"> <@var="indepvars"> 
Options: 	<@lit="--ymax">=<@var="value"> (specify maximum of dependent variable)
		<@lit="--vcv"> (print covariance matrix)
Examples: 	<@lit="logistic y const x">
		<@lit="logistic y const x --ymax=50">

Logistic regression: carries out an OLS regression using the logistic transformation of the dependent variable, 

  <@fig="logistic1">

The dependent variable must be strictly positive. If all its values lie between 0 and 1, the default is to use a <@itl="y"><@sup="*"> value (the asymptotic maximum of the dependent variable) of 1; if its values lie between 0 and 100, the default <@itl="y"><@sup="*"> is 100. 

If you wish to set a different maximum, use the <@opt="--⁠ymax"> option. Note that the supplied value must be greater than all of the observed values of the dependent variable. 

The fitted values and residuals from the regression are automatically transformed using 

  <@fig="logistic2">

where <@itl="x"> represents either a fitted value or a residual from the OLS regression using the transformed dependent variable. The reported values are therefore comparable with the original dependent variable. 

Note that if the dependent variable is binary, you should use the <@ref="logit"> command instead. 

Menu path: /Model/Limited dependent variable/Logistic

# logit Estimation

Arguments: 	<@var="depvar"> <@var="indepvars"> 
Options: 	<@lit="--robust"> (robust standard errors)
		<@lit="--cluster">=<@var="clustvar"> (clustered standard errors)
		<@lit="--multinomial"> (estimate multinomial logit)
		<@lit="--vcv"> (print covariance matrix)
		<@lit="--verbose"> (print details of iterations)
		<@lit="--p-values"> (show p-values instead of slopes)

If the dependent variable is a binary variable (all values are 0 or 1) maximum likelihood estimates of the coefficients on <@var="indepvars"> are obtained via the Newton–Raphson method. As the model is nonlinear the slopes depend on the values of the independent variables. By default the slopes with respect to each of the independent variables are calculated (at the means of those variables) and these slopes replace the usual p-values in the regression output. This behavior can be suppressed my giving the <@opt="--⁠p-values"> option. The chi-square statistic tests the null hypothesis that all coefficients are zero apart from the constant. 

By default, standard errors are computed using the negative inverse of the Hessian. If the <@opt="--⁠robust"> flag is given, then QML or Huber–White standard errors are calculated instead. In this case the estimated covariance matrix is a "sandwich" of the inverse of the estimated Hessian and the outer product of the gradient; see chapter 10 of <@bib="Davidson and MacKinnon (2004);davidson-mackinnon04">. But if the <@opt="--⁠cluster"> option is given, then "cluster-robust" standard errors are produced; see <@pdf="the Gretl User's Guide"> for details. 

If the dependent variable is not binary but is discrete, then by default it is interpreted as an ordinal response, and Ordered Logit estimates are obtained. However, if the <@opt="--⁠multinomial"> option is given, the dependent variable is interpreted as an unordered response, and Multinomial Logit estimates are produced. (In either case, if the variable selected as dependent is not discrete an error is flagged.) In the multinomial case, the accessor <@lit="$mnlprobs"> is available after estimation, to get a matrix containing the estimated probabilities of the outcomes at each observation (observations in rows, outcomes in columns). 

If you want to use logit for analysis of proportions (where the dependent variable is the proportion of cases having a certain characteristic, at each observation, rather than a 1 or 0 variable indicating whether the characteristic is present or not) you should not use the <@lit="logit"> command, but rather construct the logit variable, as in 

<code>          
   series lgt_p = log(p/(1 - p))
</code>

and use this as the dependent variable in an OLS regression. See chapter 12 of <@bib="Ramanathan (2002);ramanathan02">. 

Menu path: /Model/Limited dependent variable/Logit

# logs Transformations

Argument: 	<@var="varlist"> 

The natural log of each of the series in <@var="varlist"> is obtained and the result stored in a new series with the prefix <@lit="l_"> ("el" underscore). For example, <@lit="logs x y"> creates the new variables <@lit="l_x"> = ln(<@lit="x">) and <@lit="l_y"> = ln(<@lit="y">). 

Menu path: /Add/Logs of selected variables

# loop Programming

Argument: 	<@var="control"> 
Options: 	<@lit="--progressive"> (enable special forms of certain commands)
		<@lit="--verbose"> (report details of genr commands)
		<@lit="--quiet"> (do not report number of iterations performed)
Examples: 	<@lit="loop 1000">
		<@lit="loop 1000 --progressive">
		<@lit="loop while essdiff > .00001">
		<@lit="loop i=1991..2000">
		<@lit="loop for (r=-.99; r<=.99; r+=.01)">
		<@lit="loop foreach i xlist">

This command opens a special mode in which the program accepts commands to be executed repeatedly. You exit the mode of entering loop commands with <@lit="endloop">: at this point the stacked commands are executed. 

The parameter <@var="control"> may take any of five forms, as shown in the examples: an integer number of times to repeat the commands within the loop; "<@lit="while">" plus a boolean condition; a range of integer values for index variable; "<@lit="for">" plus three expressions in parentheses, separated by semicolons (which emulates the <@lit="for"> statement in the C programming language); or "<@lit="foreach">" plus an index variable and a list. 

See <@pdf="the Gretl User's Guide"> for further details and examples. The effect of the <@opt="--⁠progressive"> option (which is designed for use in Monte Carlo simulations) is explained there. Not all gretl commands may be used within a loop; the commands available in this context are also set out there. 

# mahal Statistics

Argument: 	<@var="varlist"> 
Options: 	<@lit="--quiet"> (don't print anything)
		<@lit="--save"> (add distances to the dataset)
		<@lit="--vcv"> (print covariance matrix)

Computes the Mahalanobis distances between the series in <@var="varlist">. The Mahalanobis distance is the distance between two points in a <@itl="k">-dimensional space, scaled by the statistical variation in each dimension of the space. For example, if <@itl="p"> and <@itl="q"> are two observations on a set of <@itl="k"> variables with covariance matrix <@itl="C">, then the Mahalanobis distance between the observations is given by 

  <@fig="mahal">

where (<@itl="p"> – <@itl="q">) is a <@itl="k">-vector. This reduces to Euclidean distance if the covariance matrix is the identity matrix. 

The space for which distances are computed is defined by the selected variables. For each observation in the current sample range, the distance is computed between the observation and the centroid of the selected variables. This distance is the multidimensional counterpart of a standard <@itl="z">-score, and can be used to judge whether a given observation "belongs" with a group of other observations. 

If the <@opt="--⁠vcv"> option is given, the covariance matrix and its inverse are printed. If the <@opt="--⁠save"> option is given, the distances are saved to the dataset under the name <@lit="mdist"> (or <@lit="mdist1">, <@lit="mdist2"> and so on if there is already a variable of that name). 

Menu path: /View/Mahalanobis distances

# makepkg Programming

Argument: 	<@var="filename"> 
Options: 	<@lit="--index"> (write auxiliary index file)
		<@lit="--translations"> (write auxiliary strings file)

Supports creation of a gretl function package via the command line. The filename argument represents the name of the package to be created, and should have the <@lit=".gfn"> extension. Please see <@pdf="the Gretl User's Guide"> for details. 

The option flags support the writing of auxiliary files for use with gretl "addons". The index file is a short XML document containing basic information about the package; it has the same basename as the package and the extension <@lit=".xml">. The translations file contains strings from the package that may be suitable for translation, in C format; for package <@lit="foo"> this file is named <@lit="foo-i18n.c">. 

Menu path: /Tools/Function packages/New package

# markers Dataset

Variants: 	<@lit="markers --to-file="><@var="filename">
		<@lit="markers --from-file="><@var="filename">
		<@lit="markers --delete">

With the option <@opt="--⁠to-file">, writes to the named file the observation marker strings from the current dataset, one per line. If no such strings are present an error is flagged. 

With the option <@opt="--⁠from-file">, reads the specified file (which should be plain text) and assigns observation markers to the rows in the dataset, reading one marker per line. In general there should be at least as many markers in the file as observations in the dataset, but if the dataset is a panel it is also acceptable if the number of markers in the file matches the number of cross-sectional units (in which case the markers are repeated for each time period.) 

The <@opt="--⁠delete"> option does what you'd expect: it removes the observation marker strings from the dataset. 

Menu path: /Data/Observation markers

# meantest Tests

Arguments: 	<@var="series1"> <@var="series2"> 
Option: 	<@lit="--unequal-vars"> (assume variances are unequal)

Calculates the <@itl="t"> statistic for the null hypothesis that the population means are equal for the variables <@var="series1"> and <@var="series2">, and shows its p-value. 

By default the test statistic is calculated on the assumption that the variances are equal for the two variables; with the <@opt="--⁠unequal-vars"> option the variances are assumed to be different. This will make a difference to the test statistic only if there are different numbers of non-missing observations for the two series. 

Menu path: /Tools/Test statistic calculator

# mle Estimation

Arguments: 	<@var="log-likelihood function"> [ <@var="derivatives"> ] 
Options: 	<@lit="--quiet"> (don't show estimated model)
		<@lit="--vcv"> (print covariance matrix)
		<@lit="--hessian"> (base covariance matrix on the Hessian)
		<@lit="--robust"> (QML covariance matrix)
		<@lit="--verbose"> (print details of iterations)
		<@lit="--no-gradient-check"> (see below)
		<@lit="--lbfgs"> (use L-BFGS-B instead of regular BFGS)
Example: 	<@inp="weibull.inp">

Performs Maximum Likelihood (ML) estimation using either the BFGS (Broyden, Fletcher, Goldfarb, Shanno) algorithm or Newton's method. The user must specify the log-likelihood function. The parameters of this function must be declared and given starting values (using the <@lit="genr"> command) prior to estimation. Optionally, the user may specify the derivatives of the log-likelihood function with respect to each of the parameters; if analytical derivatives are not supplied, a numerical approximation is computed. 

Simple example: Suppose we have a series <@lit="X"> with values 0 or 1 and we wish to obtain the maximum likelihood estimate of the probability, <@lit="p">, that <@lit="X"> = 1. (In this simple case we can guess in advance that the ML estimate of <@lit="p"> will simply equal the proportion of Xs equal to 1 in the sample.) 

The parameter <@lit="p"> must first be added to the dataset and given an initial value. For example, <@lit="scalar p = 0.5">. 

We then construct the MLE command block: 

<code>          
   mle loglik = X*log(p) + (1-X)*log(1-p)
     deriv p = X/p - (1-X)/(1-p)
   end mle
</code>

The first line above specifies the log-likelihood function. It starts with the keyword <@lit="mle">, then a dependent variable is specified and an expression for the log-likelihood is given (using the same syntax as in the <@lit="genr"> command). The next line (which is optional) starts with the keyword <@lit="deriv"> and supplies the derivative of the log-likelihood function with respect to the parameter <@lit="p">. If no derivatives are given, you should include a statement using the keyword <@lit="params"> which identifies the free parameters: these are listed on one line, separated by spaces and can be either scalars, or vectors, or any combination of the two. For example, the above could be changed to: 

<code>          
   mle loglik = X*log(p) + (1-X)*log(1-p)
     params p
   end mle
</code>

in which case numerical derivatives would be used. 

Note that any option flags should be appended to the ending line of the MLE block. 

By default, estimated standard errors are based on the Outer Product of the Gradient. If the <@opt="--⁠hessian"> option is given, they are instead based on the negative inverse of the Hessian (which is approximated numerically). If the <@opt="--⁠robust"> option is given, a QML estimator is used (namely, a sandwich of the negative inverse of the Hessian and the covariance matrix of the gradient). 

If you supply analytical derivatives, by default gretl runs a numerical check on their plausibility. Occasionally this may produce false positives, instances where correct derivatives appear to be wrong and estimation is refused. To counter this, or to achieve a little extra speed, you can give the option <@opt="--⁠no-gradient-check">. Obviously, you should do this only if you are quite confident that the gradient you have specified is right. 

For a much more in-depth description of <@lit="mle">, please refer to <@pdf="the Gretl User's Guide">. 

Menu path: /Model/Maximum likelihood

# modeltab Utilities

Variants: 	<@lit="modeltab add">
		<@lit="modeltab show">
		<@lit="modeltab free">
		<@lit="modeltab --output="><@var="filename">

Manipulates the gretl "model table". See <@pdf="the Gretl User's Guide"> for details. The sub-commands have the following effects: <@lit="add"> adds the last model estimated to the model table, if possible; <@lit="show"> displays the model table in a window; and <@lit="free"> clears the table. 

To call for printing of the model table, use the flag <@opt="--⁠output="> plus a filename. If the filename has the suffix "<@lit=".tex">", the output will be in TeX format; if the suffix is "<@lit=".rtf">" the output will be RTF; otherwise it will be plain text. In the case of TeX output the default is to produce a "fragment", suitable for inclusion in a document; if you want a stand-alone document instead, use the <@opt="--⁠complete"> option, for example 

<code>          
   modeltab --output="myfile.tex" --complete
</code>

Menu path: Session icon window, Model table icon

# modprint Printing

Arguments: 	<@var="coeffmat"> <@var="names"> [ <@var="addstats"> ] 

Prints the coefficient table and optional additional statistics for a model estimated "by hand". Mainly useful for user-written functions. 

The argument <@var="coeffmat"> should be a <@itl="k"> by 2 matrix containing <@itl="k"> coefficients and <@itl="k"> associated standard errors, and <@var="names"> should be a string containing at least <@itl="k"> names for the coefficients, separated by commas or spaces. (The <@var="names"> argument may be either the name of a string variable or a literal string, enclosed in double quotes.) 

The optional argument <@var="addstats"> is a vector containing <@itl="p"> additional statistics to be printed under the coefficient table. If this argument is given, then <@var="names"> should contain <@itl="k + p"> comma-separated strings, the additional <@itl="p"> strings to be associated with the additional statistics. 

# modtest Tests

Argument: 	[ <@var="order"> ] 
Options: 	<@lit="--normality"> (normality of residual)
		<@lit="--logs"> (non-linearity, logs)
		<@lit="--autocorr"> (serial correlation)
		<@lit="--arch"> (ARCH)
		<@lit="--squares"> (non-linearity, squares)
		<@lit="--white"> (heteroskedasticity, White's test)
		<@lit="--white-nocross"> (White's test, squares only)
		<@lit="--breusch-pagan"> (heteroskedasticity, Breusch–Pagan)
		<@lit="--robust"> (robust variance estimate for Breusch–Pagan)
		<@lit="--panel"> (heteroskedasticity, groupwise)
		<@lit="--comfac"> (common factor restriction, AR1 models only)
		<@lit="--quiet"> (don't print details)

Must immediately follow an estimation command. Depending on the option given, this command carries out one of the following: the Doornik–Hansen test for the normality of the error term; a Lagrange Multiplier test for nonlinearity (logs or squares); White's test (with or without cross-products) or the Breusch–Pagan test (<@bib="Breusch and Pagan, 1979;breusch-pagan79">) for heteroskedasticity; the LMF test for serial correlation <@bib="(Kiviet, 1986);kiviet86">; a test for ARCH (Autoregressive Conditional Heteroskedasticity; see also the <@lit="arch"> command); or a test of the common factor restriction implied by AR(1) estimation. With the exception of the normality and common factor test most of the options are only available for models estimated via OLS, but see below for details regarding two-stage least squares. 

The optional <@lit="order"> argument is relevant only in case the <@opt="--⁠autocorr"> or <@opt="--⁠arch"> options are selected. The default is to run these tests using a lag order equal to the periodicity of the data, but this can be adjusted by supplying a specific lag order. 

The <@opt="--⁠robust"> option applies only when the Breusch–Pagan test is selected; its effect is to use the robust variance estimator proposed by <@bib="Koenker (1981);koenker81">, making the test less sensitive to the assumption of normality. 

The <@opt="--⁠panel"> option is available only when the model is estimated on panel data: in this case a test for groupwise heteroskedasticity is performed (that is, for a differing error variance across the cross-sectional units). 

The <@opt="--⁠comfac"> option is available only when the model is estimated via an AR(1) method such as Hildreth–Lu. The auxiliary regression takes the form of a relatively unrestricted dynamic model, which is used to test the common factor restriction implicit in the AR(1) specification. 

By default, the program prints the auxiliary regression on which the test statistic is based, where applicable. This may be suppressed by using the <@opt="--⁠quiet"> flag. The test statistic and its p-value may be retrieved using the accessors <@lit="$test"> and <@lit="$pvalue"> respectively. 

When a model has been estimated by two-stage least squares (see <@ref="tsls">), the LM principle breaks down and gretl offers some equivalents: the <@lit="--autocorr"> option computes Godfrey's test for autocorrelation <@bib="(Godfrey, 1994);godfrey94"> while the <@lit="--white"> option yields the HET1 heteroskedasticity test <@bib="(Pesaran and Taylor, 1999);pesaran99">. 

Menu path: Model window, /Tests

# mpols Estimation

Arguments: 	<@var="depvar"> <@var="indepvars"> 
Options: 	<@lit="--vcv"> (print covariance matrix)
		<@lit="--simple-print"> (do not print auxiliary statistics)
		<@lit="--quiet"> (suppress printing of results)

Computes OLS estimates for the specified model using multiple precision floating-point arithmetic, with the help of the Gnu Multiple Precision (GMP) library. By default 256 bits of precision are used for the calculations, but this can be increased via the environment variable <@lit="GRETL_MP_BITS">. For example, when using the bash shell one could issue the following command, before starting gretl, to set a precision of 1024 bits. 

<code>          
   export GRETL_MP_BITS=1024
</code>

A rather arcane option is available for this command (primarily for testing purposes): if the <@var="indepvars"> list is followed by a semicolon and a further list of numbers, those numbers are taken as powers of <@var="x"> to be added to the regression, where <@var="x"> is the last variable in <@var="indepvars">. These additional terms are computed and stored in multiple precision. In the following example <@lit="y"> is regressed on <@lit="x"> and the second, third and fourth powers of <@lit="x">: 

<code>          
   mpols y 0 x ; 2 3 4
</code>

Menu path: /Model/Other linear models/High precision OLS

# negbin Estimation

Arguments: 	<@var="depvar"> <@var="indepvars"> [ ; <@var="offset"> ] 
Options: 	<@lit="--model1"> (use NegBin 1 model)
		<@lit="--robust"> (QML covariance matrix)
		<@lit="--cluster">=<@var="clustvar"> (see <@ref="logit"> for explanation)
		<@lit="--opg"> (see below)
		<@lit="--vcv"> (print covariance matrix)
		<@lit="--verbose"> (print details of iterations)

Estimates a Negative Binomial model. The dependent variable is taken to represent a count of the occurrence of events of some sort, and must have only non-negative integer values. By default the model NegBin 2 is used, in which the conditional variance of the count is given by μ(1 + αμ), where μ denotes the conditional mean. But if the <@opt="--⁠model1"> option is given the conditional variance is μ(1 + α). 

The optional <@lit="offset"> series works in the same way as for the <@ref="poisson"> command. The Poisson model is a restricted form of the Negative Binomial in which α = 0 by construction. 

By default, standard errors are computed using a numerical approximation to the Hessian at convergence. But if the <@opt="--⁠opg"> option is given the covariance matrix is based on the Outer Product of the Gradient (OPG), or if the <@opt="--⁠robust"> option is given QML standard errors are calculated, using a "sandwich" of the inverse of the Hessian and the OPG. 

Menu path: /Model/Limited dependent variable/Count data...

# nls Estimation

Arguments: 	<@var="function"> [ <@var="derivatives"> ] 
Options: 	<@lit="--quiet"> (don't show estimated model)
		<@lit="--robust"> (robust standard errors)
		<@lit="--vcv"> (print covariance matrix)
		<@lit="--verbose"> (print details of iterations)
Example: 	<@inp="wg_nls.inp">

Performs Nonlinear Least Squares (NLS) estimation using a modified version of the Levenberg–Marquardt algorithm. You must supply a function specification. The parameters of this function must be declared and given starting values (using the <@lit="genr"> command) prior to estimation. Optionally, you may specify the derivatives of the regression function with respect to each of the parameters. If you do not supply derivatives you should instead give a list of the parameters to be estimated (separated by spaces or commas), preceded by the keyword <@lit="params">. In the latter case a numerical approximation to the Jacobian is computed. 

It is easiest to show what is required by example. The following is a complete script to estimate the nonlinear consumption function set out in William Greene's <@itl="Econometric Analysis"> (Chapter 11 of the 4th edition, or Chapter 9 of the 5th). The numbers to the left of the lines are for reference and are not part of the commands. Note that any option flags, such as <@opt="--⁠vcv"> for printing the covariance matrix of the parameter estimates, should be appended to the final command, <@lit="end nls">. 

<code>          
   1   open greene11_3.gdt
   2   ols C 0 Y
   3   scalar a = $coeff(0)
   4   scalar b = $coeff(Y)
   5   scalar g = 1.0
   6   nls C = a + b * Y^g
   7    deriv a = 1
   8    deriv b = Y^g
   9    deriv g = b * Y^g * log(Y)
   10  end nls --vcv
</code>

It is often convenient to initialize the parameters by reference to a related linear model; that is accomplished here on lines 2 to 5. The parameters alpha, beta and gamma could be set to any initial values (not necessarily based on a model estimated with OLS), although convergence of the NLS procedure is not guaranteed for an arbitrary starting point. 

The actual NLS commands occupy lines 6 to 10. On line 6 the <@lit="nls"> command is given: a dependent variable is specified, followed by an equals sign, followed by a function specification. The syntax for the expression on the right is the same as that for the <@lit="genr"> command. The next three lines specify the derivatives of the regression function with respect to each of the parameters in turn. Each line begins with the keyword <@lit="deriv">, gives the name of a parameter, an equals sign, and an expression whereby the derivative can be calculated (again, the syntax here is the same as for <@lit="genr">). As an alternative to supplying numerical derivatives, you could substitute the following for lines 7 to 9: 

<code>          
   params a b g
</code>

Line 10, <@lit="end nls">, completes the command and calls for estimation. Any options should be appended to this line. 

For further details on NLS estimation please see <@pdf="the Gretl User's Guide">. 

Menu path: /Model/Nonlinear Least Squares

# normtest Tests

Argument: 	<@var="series"> 
Options: 	<@lit="--dhansen"> (Doornik–Hansen test, the default)
		<@lit="--swilk"> (Shapiro–Wilk test)
		<@lit="--lillie"> (Lilliefors test)
		<@lit="--jbera"> (Jarque–Bera test)
		<@lit="--all"> (do all tests)
		<@lit="--quiet"> (suppress printed output)

Carries out a test for normality for the given <@var="series">. The specific test is controlled by the option flags (but if no flag is given, the Doornik–Hansen test is performed). Note: the Doornik–Hansen and Shapiro–Wilk tests are recommended over the others, on account of their superior small-sample properties. 

The test statistic and its p-value may be retrieved using the accessors <@lit="$test"> and <@lit="$pvalue">. Please note that if the <@opt="--⁠all"> option is given, the result recorded is that from the Doornik–Hansen test. 

Menu path: /Variable/Normality test

# nulldata Dataset

Argument: 	<@var="series_length"> 
Option: 	<@lit="--preserve"> (preserve matrices)
Example: 	<@lit="nulldata 500">

Establishes a "blank" data set, containing only a constant and an index variable, with periodicity 1 and the specified number of observations. This may be used for simulation purposes: some of the <@lit="genr"> commands (e.g. <@lit="genr uniform()">, <@lit="genr normal()">) will generate dummy data from scratch to fill out the data set. This command may be useful in conjunction with <@lit="loop">. See also the "seed" option to the <@ref="set"> command. 

By default, this command cleans out all data in gretl's current workspace. If you give the <@opt="--⁠preserve"> option, however, any currently defined matrices are retained. 

Menu path: /File/New data set

# ols Estimation

Arguments: 	<@var="depvar"> <@var="indepvars"> 
Options: 	<@lit="--vcv"> (print covariance matrix)
		<@lit="--robust"> (robust standard errors)
		<@lit="--cluster">=<@var="clustvar"> (clustered standard errors)
		<@lit="--jackknife"> (see below)
		<@lit="--simple-print"> (do not print auxiliary statistics)
		<@lit="--quiet"> (suppress printing of results)
		<@lit="--anova"> (print an ANOVA table)
		<@lit="--no-df-corr"> (suppress degrees of freedom correction)
		<@lit="--print-final"> (see below)
Examples: 	<@lit="ols 1 0 2 4 6 7">
		<@lit="ols y 0 x1 x2 x3 --vcv">
		<@lit="ols y 0 x1 x2 x3 --quiet">

Computes ordinary least squares (OLS) estimates with <@var="depvar"> as the dependent variable and <@var="indepvars"> as the list of independent variables. Variables may be specified by name or number; use the number zero for a constant term. 

Besides coefficient estimates and standard errors, the program also prints p-values for <@itl="t"> (two-tailed) and <@itl="F">-statistics. A p-value below 0.01 indicates statistical significance at the 1 percent level and is marked with <@lit="***">. <@lit="**"> indicates significance between 1 and 5 percent and <@lit="*"> indicates significance between the 5 and 10 percent levels. Model selection statistics (the Akaike Information Criterion or AIC and Schwarz's Bayesian Information Criterion) are also printed. The formula used for the AIC is that given by <@bib="Akaike (1974);akaike74">, namely minus two times the maximized log-likelihood plus two times the number of parameters estimated. 

If the option <@opt="--⁠no-df-corr"> is given, the usual degrees of freedom correction is not applied when calculating the estimated error variance (and hence also the standard errors of the parameter estimates). 

The option <@opt="--⁠print-final"> is applicable only in the context of a <@ref="loop">. It arranges for the regression to be run silently on all but the final iteration of the loop. See <@pdf="the Gretl User's Guide"> for details. 

Various internal variables may be retrieved following estimation. For example 

<code>          
   series uh = $uhat
</code>

saves the residuals under the name <@lit="uh">. See the "accessors" section of the gretl function reference for details. 

The specific formula ("HC" version) used for generating robust standard errors when the <@opt="--⁠robust"> option is given can be adjusted via the <@ref="set"> command. The <@opt="--⁠jackknife"> option has the effect of selecting an <@lit="hc_version"> of <@lit="3a">. The <@opt="--⁠cluster"> overrides the selection of HC version, and produces robust standard errors by grouping the observations by the distinct values of <@var="clustvar">; see <@pdf="the Gretl User's Guide"> for details. 

Menu path: /Model/Ordinary Least Squares
Other access: Beta-hat button on toolbar

# omit Tests

Argument: 	<@var="varlist"> 
Options: 	<@lit="--test-only"> (don't replace the current model)
		<@lit="--chi-square"> (give chi-square form of Wald test)
		<@lit="--quiet"> (print only the basic test result)
		<@lit="--silent"> (don't print anything)
		<@lit="--vcv"> (print covariance matrix for reduced model)
		<@lit="--auto">[=<@var="alpha">] (sequential elimination, see below)
Examples: 	<@lit="omit 5 7 9">
		<@lit="omit seasonals --quiet">
		<@lit="omit --auto">
		<@lit="omit --auto=0.05">

This command must follow an estimation command. It calculates a Wald test for the joint significance of the variables in <@var="varlist">, which should be a subset of the independent variables in the model last estimated. The results of the test may be retrieved using the accessors <@lit="$test"> and <@lit="$pvalue">. 

By default the restricted model is estimated and it replaces the original as the "current model" for the purposes of, for example, retrieving the residuals as <@lit="$uhat"> or doing further tests. This behavior may be suppressed via the <@opt="--⁠test-only"> option. 

By default the <@itl="F">-form of the Wald test is recorded; the <@opt="--⁠chi-square"> option may be used to record the chi-square form instead. 

If the restricted model is both estimated and printed, the <@opt="--⁠vcv"> option has the effect of printing its covariance matrix, otherwise this option is ignored. 

Alternatively, if the <@opt="--⁠auto"> flag is given, sequential elimination is performed: at each step the variable with the highest p-value is omitted, until all remaining variables have a p-value no greater than some cutoff. The default cutoff is 10 percent (two-sided); this can be adjusted by appending "<@lit="=">" and a value between 0 and 1 (with no spaces), as in the fourth example above. If <@var="varlist"> is given this process is confined to the listed variables, otherwise all variables are treated as candidates for omission. Note that the <@opt="--⁠auto"> and <@opt="--⁠test-only"> options cannot be combined. 

Menu path: Model window, /Tests/Omit variables

# open Dataset

Argument: 	<@var="filename"> 
Options: 	<@lit="--quiet"> (don't print list of series)
		<@lit="--preserve"> (preserve any matrices and scalars)
		<@lit="--www"> (use a database on the gretl server)
		See below for additional specialized options
Examples: 	<@lit="open data4-1">
		<@lit="open voter.dta">
		<@lit="open fedbog --www">

Opens a data file. If a data file is already open, it is replaced by the newly opened one. To add data to the current dataset, see <@ref="append"> and (for greater flexibility) <@ref="join">. 

If a full path is not given, the program will search some relevant paths to try to find the file. If no filename suffix is given (as in the first example above), gretl assumes a native datafile with suffix <@lit=".gdt">. Based on the name of the file and various heuristics, gretl will try to detect the format of the data file (native, plain text, CSV, MS Excel, Stata, SPSS, etc.). 

If the <@var="filename"> argument takes the form of a URI starting with <@lit="http://">, then gretl will attempt to download the indicated data file before opening it. 

By default, opening a new data file clears the current gretl session, which includes deletion of any named matrices and scalars. If you wish to keep any currently defined matrices and scalars, use the <@opt="--⁠preserve"> option. 

The <@lit="open"> command can also be used to open a database (gretl, RATS 4.0 or PcGive) for reading. In that case it should be followed by the <@ref="data"> command to extract particular series from the database. If the <@lit="www"> option is given, the program will try to access a database of the given name on the gretl server — for instance the Federal Reserve interest rates database in the third example above. 

When opening a spreadsheet file (Gnumeric, Open Document or MS Excel), you may give up to three additional parameters following the filename. First, you can select a particular worksheet within the file. This is done either by giving its (1-based) number, using the syntax, e.g., <@opt="--⁠sheet=2">, or, if you know the name of the sheet, by giving the name in double quotes, as in <@opt="--⁠sheet="MacroData"">. The default is to read the first worksheet. You can also specify a column and/or row offset into the worksheet via, e.g., 

<code>          
   --coloffset=3 --rowoffset=2
</code>

which would cause gretl to ignore the first 3 columns and the first 2 rows. The default is an offset of 0 in both dimensions, that is, to start reading at the top-left cell. 

With plain text files, gretl generally expects to find the data columns delimited in some standard manner. But there is also a special facility for reading "fixed format" files, in which there are no delimiters but there is a known specification of the form, e.g., "variable <@itl="k"> occupies 8 columns starting at column 24". To read such files, you should append a string <@opt="--⁠fixed-cols="><@var="colspec">, where <@var="colspec"> is composed of comma-separated integers. These integers are interpreted as a set of pairs. The first element of each pair denotes a starting column, measured in bytes from the beginning of the line with 1 indicating the first byte; and the second element indicates how many bytes should be read for the given field. So, for example, if you say 

<code>          
   open fixed.txt --fixed-cols=1,6,20,3
</code>

then for variable 1 gretl will read 6 bytes starting at column 1; and for variable 2, 3 bytes starting at column 20. Lines that are blank, or that begin with <@lit="#">, are ignored, but otherwise the column-reading template is applied, and if anything other than a valid numerical value is found an error is flagged. If the data are read successfully, the variables will be named <@lit="v1">, <@lit="v2">, etc. It's up to the user to provide meaningful names and/or descriptions using the commands <@ref="rename"> and/or <@ref="setinfo">. 

Menu path: /File/Open data
Other access: Drag a data file into gretl (MS Windows or Gnome)

# orthdev Transformations

Argument: 	<@var="varlist"> 

Applicable with panel data only. A series of forward orthogonal deviations is obtained for each variable in <@var="varlist"> and stored in a new variable with the prefix <@lit="o_">. Thus <@lit="orthdev x y"> creates the new variables <@lit="o_x"> and <@lit="o_y">. 

The values are stored one step ahead of their true temporal location (that is, <@lit="o_x"> at observation <@itl="t"> holds the deviation that, strictly speaking, belongs at <@itl="t"> – 1). This is for compatibility with first differences: one loses the first observation in each time series, not the last. 

# outfile Printing

Variants: 	<@lit="outfile"> <@var="filename"> <@var="option">
		<@lit="outfile --close">
Options: 	<@lit="--append"> (append to file)
		<@lit="--write"> (overwrite file)
		<@lit="--quiet"> (see below)
Examples: 	<@lit="outfile regress.txt --write">
		<@lit="outfile --close">

Diverts output to <@var="filename">, until further notice. Use the flag <@opt="--⁠append"> to append output to an existing file or <@opt="--⁠write"> to start a new file (or overwrite an existing one). Only one file can be opened in this way at any given time. 

The <@opt="--⁠close"> flag is used to close an output file that was previously opened as above. Output will then revert to the default stream. 

In the first example command above, the file <@lit="regress.txt"> is opened for writing, and in the second it is closed. This would make sense as a sequence only if some commands were issued before the <@opt="--⁠close">. For example if an <@lit="ols"> command intervened, its output would go to <@lit="regress.txt"> rather than the screen. 

Three special variants on the above are available. If you give the keyword <@lit="null"> in place of a real filename along with the <@opt="--⁠write"> option, the effect is to suppress all printed output until redirection is ended. If either of the keywords <@lit="stdout"> or <@lit="stderr"> are given in place of a regular filename the effect is to redirect output to standard output or standard error output respectively. 

The <@opt="--⁠quiet"> option is for use with <@opt="--⁠write"> or <@opt="--⁠append">: its effect is to turn off the echoing of commands and the printing of auxiliary messages while output is redirected. It is equivalent to doing 

<code>          
   set echo off
   set messages off
</code>

except that when redirection is ended the original values of the <@lit="echo"> and <@lit="messages"> variables are restored. 

# panel Estimation

Arguments: 	<@var="depvar"> <@var="indepvars"> 
Options: 	<@lit="--vcv"> (print covariance matrix)
		<@lit="--fixed-effects"> (estimate with group fixed effects)
		<@lit="--random-effects"> (random effects or GLS model)
		<@lit="--nerlove"> (use the Nerlove transformation)
		<@lit="--between"> (estimate the between-groups model)
		<@lit="--robust"> (robust standard errors; see below)
		<@lit="--time-dummies"> (include time dummy variables)
		<@lit="--unit-weights"> (weighted least squares)
		<@lit="--iterate"> (iterative estimation)
		<@lit="--matrix-diff"> (use matrix-difference method for Hausman test)
		<@lit="--quiet"> (less verbose output)
		<@lit="--verbose"> (more verbose output)

Estimates a panel model. By default the fixed effects estimator is used; this is implemented by subtracting the group or unit means from the original data. 

If the <@opt="--⁠random-effects"> flag is given, random effects estimates are computed, by default using the method of <@bib="Swamy and Arora (1972);swamy72">. In this case (only) the option <@opt="--⁠matrix-diff"> forces use of the matrix-difference method (as opposed to the regression method) for carrying out the Hausman test for the consistency of the random effects estimator. Also specific to the random effects estimator is the <@opt="--⁠nerlove"> flag, which selects the method of <@bib="Nerlove (1971);nerlove71"> as opposed to Swamy and Arora. 

Alternatively, if the <@opt="--⁠unit-weights"> flag is given, the model is estimated via weighted least squares, with the weights based on the residual variance for the respective cross-sectional units in the sample. In this case (only) the <@opt="--⁠iterate"> flag may be added to produce iterative estimates: if the iteration converges, the resulting estimates are Maximum Likelihood. 

As a further alternative, if the <@opt="--⁠between"> flag is given, the between-groups model is estimated (that is, an OLS regression using the group means). 

The <@opt="--⁠robust"> option is available only for fixed effects models. The default variant is the Arellano HAC estimator, but Beck–Katz "Panel Corrected Standard Errors" can be selected via the command <@lit="set pcse on">. 

For more details on panel estimation, please see <@pdf="the Gretl User's Guide">. 

Menu path: /Model/Panel

# pca Statistics

Argument: 	<@var="varlist"> 
Options: 	<@lit="--covariance"> (use the covariance matrix)
		<@lit="--save">[=<@var="n">] (save major components)
		<@lit="--save-all"> (save all components)
		<@lit="--quiet"> (don't print results)

Principal Components Analysis. Unless the <@opt="--⁠quiet"> option is given, prints the eigenvalues of the correlation matrix (or the covariance matrix if the <@opt="--⁠covariance"> option is given) for the variables in <@var="varlist">, along with the proportion of the joint variance accounted for by each component. Also prints the corresponding eigenvectors (or "component loadings"). 

If you give the <@opt="--⁠save-all"> option then all components are saved to the dataset as series, with names <@lit="PC1">, <@lit="PC2"> and so on. These artificial variables are formed as the sum of (component loading) times (standardized <@itl="X"><@sub="i">), where <@itl="X"><@sub="i"> denotes the <@itl="i">th variable in <@var="varlist">. 

If you give the <@opt="--⁠save"> option without a parameter value, components with eigenvalues greater than the mean (which means greater than 1.0 if the analysis is based on the correlation matrix) are saved to the dataset as described above. If you provide a value for <@var="n"> with this option then the most important <@var="n"> components are saved. 

See also the <@xrf="princomp"> function. 

Menu path: /View/Principal components
Other access: Main window pop-up (multiple selection)

# pergm Statistics

Arguments: 	<@var="series"> [ <@var="bandwidth"> ] 
Options: 	<@lit="--bartlett"> (use Bartlett lag window)
		<@lit="--log"> (use log scale)
		<@lit="--radians"> (show frequency in radians)
		<@lit="--degrees"> (show frequency in degrees)
		<@lit="--plot">=<@var="mode-or-filename"> (see below)

Computes and displays the spectrum of the specified series. By default the sample periodogram is given, but optionally a Bartlett lag window is used in estimating the spectrum (see, for example, Greene's <@itl="Econometric Analysis"> for a discussion of this). The default width of the Bartlett window is twice the square root of the sample size but this can be set manually using the <@var="bandwidth"> parameter, up to a maximum of half the sample size. 

If the <@opt="--⁠log"> option is given the spectrum is represented on a logarithmic scale. 

The (mutually exclusive) options <@opt="--⁠radians"> and <@opt="--⁠degrees"> influence the appearance of the frequency axis when the periodogram is graphed. By default the frequency is scaled by the number of periods in the sample, but these options cause the axis to be labeled from 0 to π radians or from 0 to 180°, respectively. 

By default, if the program is not in batch mode a plot of the periodogram is shown. This can be adjusted via the <@opt="--⁠plot"> option. The acceptable parameters to this option are <@lit="none"> (to suppress the plot); <@lit="display"> (to display a plot even when in batch mode); or a file name. The effect of providing a file name is as described for the <@opt="--⁠output"> option of the <@ref="gnuplot"> command. 

Menu path: /Variable/Periodogram
Other access: Main window pop-up menu (single selection)

# poisson Estimation

Arguments: 	<@var="depvar"> <@var="indepvars"> [ ; <@var="offset"> ] 
Options: 	<@lit="--robust"> (robust standard errors)
		<@lit="--cluster">=<@var="clustvar"> (see <@ref="logit"> for explanation)
		<@lit="--vcv"> (print covariance matrix)
		<@lit="--verbose"> (print details of iterations)
Examples: 	<@lit="poisson y 0 x1 x2">
		<@lit="poisson y 0 x1 x2 ; S">

Estimates a poisson regression. The dependent variable is taken to represent the occurrence of events of some sort, and must take on only non-negative integer values. 

If a discrete random variable <@itl="Y"> follows the Poisson distribution, then 

  <@fig="poisson1">

for <@itl="y"> = 0, 1, 2,…. The mean and variance of the distribution are both equal to <@itl="v">. In the Poisson regression model, the parameter <@itl="v"> is represented as a function of one or more independent variables. The most common version (and the only one supported by gretl) has 

  <@fig="poisson2">

or in other words the log of <@itl="v"> is a linear function of the independent variables. 

Optionally, you may add an "offset" variable to the specification. This is a scale variable, the log of which is added to the linear regression function (implicitly, with a coefficient of 1.0). This makes sense if you expect the number of occurrences of the event in question to be proportional, other things equal, to some known factor. For example, the number of traffic accidents might be supposed to be proportional to traffic volume, other things equal, and in that case traffic volume could be specified as an "offset" in a Poisson model of the accident rate. The offset variable must be strictly positive. 

By default, standard errors are computed using the negative inverse of the Hessian. If the <@opt="--⁠robust"> flag is given, then QML or Huber–White standard errors are calculated instead. In this case the estimated covariance matrix is a "sandwich" of the inverse of the estimated Hessian and the outer product of the gradient. 

See also <@ref="negbin">. 

Menu path: /Model/Limited dependent variable/Count data...

# print Printing

Variants: 	<@lit="print"> <@var="varlist">
		<@lit="print">
		<@lit="print"> <@var="object_name">
		<@lit="print"> <@var="string_literal">
Options: 	<@lit="--byobs"> (by observations)
		<@lit="--no-dates"> (use simple observation numbers)
Examples: 	<@lit="print x1 x2 --byobs">
		<@lit="print my_matrix">
		<@lit="print "This is a string"">

If <@var="varlist"> is given, prints the values of the specified series, or if no argument is given, prints the values of all series in the current dataset. If the <@opt="--⁠byobs"> flag is added the data are printed by observation, otherwise they are printed by variable. When printing by observation, the default is to show the date (with time-series data) or the observation marker string (if any) at the start of each line. The <@opt="--⁠no-dates"> option suppresses the printing of dates or markers; a simple observation number is shown instead. 

Besides printing series, you may give the name of a (single) matrix or scalar variable for printing. Or you may give a literal string argument, enclosed in double quotes, to be printed as is. In these case the option flags are not applicable. 

Note that you can gain greater control over the printing format (and so, for example, expose a greater number of digits than are shown by default) by using <@ref="printf">. 

Menu path: /Data/Display values

# printf Printing

Arguments: 	<@var="format"> <@lit=", "><@var="args"> 

Prints scalar values, series, matrices, or strings under the control of a format string (providing a subset of the <@lit="printf()"> statement in the C programming language). Recognized numeric formats are <@lit="%e">, <@lit="%E">, <@lit="%f">, <@lit="%g">, <@lit="%G"> and <@lit="%d">, in each case with the various modifiers available in C. Examples: the format <@lit="%.10g"> prints a value to 10 significant figures; <@lit="%12.6f"> prints a value to 6 decimal places, with a width of 12 characters. The format <@lit="%s"> should be used for strings. 

The format string itself must be enclosed in double quotes. The values to be printed must follow the format string, separated by commas. These values should take the form of either (a) the names of variables, (b) expressions that are valid for the <@lit="genr"> command, or (c) the special functions <@lit="varname()"> or <@lit="date()">. The following example prints the values of two variables plus that of a calculated expression: 

<code>          
   ols 1 0 2 3
   scalar b = $coeff[2]
   scalar se_b = $stderr[2]
   printf "b = %.8g, standard error %.8g, t = %.4f\n", 
          b, se_b, b/se_b
</code>

The next lines illustrate the use of the varname and date functions, which respectively print the name of a variable, given its ID number, and a date string, given a 1-based observation number. 

<code>          
   printf "The name of variable %d is %s\n", i, varname(i)
   printf "The date of observation %d is %s\n", j, date(j)
</code>

If a matrix argument is given in association with a numeric format, the entire matrix is printed using the specified format for each element. The same applies to series, except that the range of values printed is governed by the current sample setting. 

The maximum length of a format string is 127 characters. The escape sequences <@lit="\n"> (newline), <@lit="\t"> (tab), <@lit="\v"> (vertical tab) and <@lit="\\"> (literal backslash) are recognized. To print a literal percent sign, use <@lit="%%">. 

As in C, numerical values that form part of the format (width and or precision) may be given directly as numbers, as in <@lit="%10.4f">, or they may be given as variables. In the latter case, one puts asterisks into the format string and supplies corresponding arguments in order. For example, 

<code>          
   scalar width = 12
   scalar precision = 6
   printf "x = %*.*f\n", width, precision, x
</code>

# probit Estimation

Arguments: 	<@var="depvar"> <@var="indepvars"> 
Options: 	<@lit="--robust"> (robust standard errors)
		<@lit="--cluster">=<@var="clustvar"> (see <@ref="logit"> for explanation)
		<@lit="--vcv"> (print covariance matrix)
		<@lit="--verbose"> (print details of iterations)
		<@lit="--p-values"> (show p-values instead of slopes)
		<@lit="--random-effects"> (estimates a random effects panel probit model)
		<@lit="--quadpoints">=<@var="k"> (number of quadrature points for RE estimation)

If the dependent variable is a binary variable (all values are 0 or 1) maximum likelihood estimates of the coefficients on <@var="indepvars"> are obtained via the Newton–Raphson method. As the model is nonlinear the slopes depend on the values of the independent variables. By default the slopes with respect to each of the independent variables are calculated (at the means of those variables) and these slopes replace the usual p-values in the regression output. This behavior can be suppressed my giving the <@opt="--⁠p-values"> option. The chi-square statistic tests the null hypothesis that all coefficients are zero apart from the constant. 

By default, standard errors are computed using the negative inverse of the Hessian. If the <@opt="--⁠robust"> flag is given, then QML or Huber–White standard errors are calculated instead. In this case the estimated covariance matrix is a "sandwich" of the inverse of the estimated Hessian and the outer product of the gradient. See chapter 10 of Davidson and MacKinnon for details. 

If the dependent variable is not binary but is discrete, then Ordered Probit estimates are obtained. (If the variable selected as dependent is not discrete, an error is flagged.) 

With the <@opt="--⁠random-effects"> option, the error term is assumed to be composed of two normally distributed components: one time-invariant term that is specific to the cross-sectional unit or "individual" (and is known as the individual effect); and one term that is specific to the particular observation. 

Evaluation of the likelihood for this model involves the use of Gauss-Hermite quadrature for approximating the value of expectations of functions of normal variates. The number of quadrature points used can be chosen through the <@opt="--⁠quadpoints"> option (the default is 32). Using more points will increase the accuracy of the results, but at the cost of longer compute time; with many quadrature points and a large dataset estimation may be quite time consuming. 

Besides the usual parameter estimates (and associated statistics) relating to the included regressors, certain additional information is presented on estimation of this sort of model: 

<indent>
• <@lit="lnsigma2">: the maximum likelihood estimate of the log of the variance of the individual effect; 
</indent>

<indent>
• <@lit="sigma_u">: the estimated standard deviation of the individual effect; and 
</indent>

<indent>
• <@lit="rho">: the estimated share of the individual effect in the composite error variance (also known as the intra-class correlation). 
</indent>

The Likelihood Ratio test of the null hypothesis that <@lit="rho"> equals zero provides a means of assessing whether the random effects specification is needed. If the null is not rejected that suggests that a simple pooled probit specification is adequate. 

Probit for analysis of proportions is not implemented in gretl at this point. 

Menu path: /Model/Limited dependent variable/Probit

# pvalue Utilities

Arguments: 	<@var="dist"> [ <@var="params"> ] <@var="xval"> 
Examples: 	<@lit="pvalue z zscore">
		<@lit="pvalue t 25 3.0">
		<@lit="pvalue X 3 5.6">
		<@lit="pvalue F 4 58 fval">
		<@lit="pvalue G shape scale x">
		<@lit="pvalue B bprob 10 6">
		<@lit="pvalue P lambda x">
		<@lit="pvalue W shape scale x">

Computes the area to the right of <@var="xval"> in the specified distribution (<@lit="z"> for Gaussian, <@lit="t"> for Student's <@itl="t">, <@lit="X"> for chi-square, <@lit="F"> for <@itl="F">, <@lit="G"> for gamma, <@lit="B"> for binomial, <@lit="P"> for Poisson, or <@lit="W"> for Weibull). 

Depending on the distribution, the following information must be given, before the <@var="xval">: for the <@itl="t"> and chi-square distributions, the degrees of freedom; for <@itl="F">, the numerator and denominator degrees of freedom; for gamma, the shape and scale parameters; for the binomial distribution, the "success" probability and the number of trials; for the Poisson distribution, the parameter λ (which is both the mean and the variance); and for the Weibull distribution, shape and scale parameters. As shown in the examples above, the numerical parameters may be given in numeric form or as the names of variables. 

The parameters for the gamma distribution are sometimes given as mean and variance rather than shape and scale. The mean is the product of the shape and the scale; the variance is the product of the shape and the square of the scale. So the scale may be found as the variance divided by the mean, and the shape as the mean divided by the scale. 

Menu path: /Tools/P-value finder

# qlrtest Tests

For a model estimated on time-series data via OLS, performs the Quandt likelihood ratio (QLR) test for a structural break at an unknown point in time, with 15 percent trimming at the beginning and end of the sample period. 

For each potential break point within the central 70 percent of the observations, a Chow test is performed. See <@ref="chow"> for details; as with the regular Chow test, this is a robust Wald test if the original model was estimated with the <@opt="--⁠robust"> option, an F-test otherwise. The QLR statistic is then the maximum of the individual test statistics. 

An asymptotic p-value is obtained using the method of <@bib="Bruce Hansen (1997);hansen97">. 

Menu path: Model window, /Tests/QLR test

# qqplot Graphs

Variants: 	<@lit="qqplot"> <@var="y">
		<@lit="qqplot"> <@var="y"> <@var="x">
Options: 	<@lit="--z-scores"> (see below)
		<@lit="--raw"> (see below)
		<@lit="--output">=<@var="filename"> (send output to specified file)

Given just one series argument, displays a plot of the empirical quantiles of the selected series (given by name or ID number) against the quantiles of the normal distribution. The series must include at least 20 valid observations in the current sample range. By default the empirical quantiles are plotted against quantiles of the normal distribution having the same mean and variance as the sample data, but two alternatives are available: if the <@opt="--⁠z-scores"> option is given the data are standardized, while if the <@opt="--⁠raw"> option is given the "raw" empirical quantiles are plotted against the quantiles of the standard normal distribution. 

The option <@opt="--⁠output"> has the effect to send the output to the desiderd filename; use "display" to force output to the screen, for example during a loop. 

Given two series arguments, <@var="y"> and <@var="x">, displays a plot of the empirical quantiles of <@var="y"> against those of <@var="x">. The data values are not standardized. 

Menu path: /Variable/Normal Q-Q plot
Menu path: /View/Graph specified vars/Q-Q plot

# quantreg Estimation

Arguments: 	<@var="tau"> <@var="depvar"> <@var="indepvars"> 
Options: 	<@lit="--robust"> (robust standard errors)
		<@lit="--intervals">[=<@var="level">] (compute confidence intervals)
		<@lit="--vcv"> (print covariance matrix)
		<@lit="--quiet"> (suppress printing of results)
Examples: 	<@lit="quantreg 0.25 y 0 xlist">
		<@lit="quantreg 0.5 y 0 xlist --intervals">
		<@lit="quantreg 0.5 y 0 xlist --intervals=.95">
		<@lit="quantreg tauvec y 0 xlist --robust">
		See also <@inp="mrw_qr.inp">

Quantile regression. The first argument, <@var="tau">, is the conditional quantile for which estimates are wanted. It may be given either as a numerical value or as the name of a pre-defined scalar variable; the value must be in the range 0.01 to 0.99. (Alternatively, a vector of values may be given for <@var="tau">; see below for details.) The second and subsequent arguments compose a regression list on the same pattern as <@ref="ols">. 

Without the <@opt="--⁠intervals"> option, standard errors are printed for the quantile estimates. By default, these are computed according to the asymptotic formula given by <@bib="Koenker and Bassett (1978);koenker-bassett78">, but if the <@opt="--⁠robust"> option is given, standard errors that are robust with respect to heteroskedasticity are calculated using the method of <@bib="Koenker and Zhao (1994);koenker-zhao94">. 

When the <@opt="--⁠intervals"> option is chosen, confidence intervals are given for the parameter estimates instead of standard errors. These intervals are computed using the rank inversion method, and in general they are asymmetrical about the point estimates. The specifics of the calculation are inflected by the <@opt="--⁠robust"> option: without this, the intervals are computed on the assumption of IID errors <@bib="(Koenker, 1994);koenker94">; with it, they use the robust estimator developed by <@bib="Koenker and Machado (1999);koenker-machado99">. 

By default, 90 percent confidence intervals are produced. You can change this by appending a confidence level (expressed as a decimal fraction) to the intervals option, as in <@opt="--⁠intervals=0.95">. 

Vector-valued <@var="tau">: instead of supplying a scalar, you may give the name of a pre-defined matrix. In this case estimates are computed for all the given <@var="tau"> values and the results are printed in a special format, showing the sequence of quantile estimates for each regressor in turn. 

Menu path: /Model/Robust estimation/Quantile regression

# quit Utilities

Exits from the program, giving you the option of saving the output from the session on the way out. 

Menu path: /File/Exit

# rename Dataset

Arguments: 	<@var="series"> <@var="newname"> 

Changes the name of <@var="series"> (identified by name or ID number) to <@var="newname">. The new name must be of 31 characters maximum, must start with a letter, and must be composed of only letters, digits, and the underscore character. 

Menu path: /Variable/Edit attributes
Other access: Main window pop-up menu (single selection)

# reset Tests

Options: 	<@lit="--quiet"> (don't print the auxiliary regression)
		<@lit="--squares-only"> (compute the test using only the squares)
		<@lit="--cubes-only"> (compute the test using only the cubes)

Must follow the estimation of a model via OLS. Carries out Ramsey's RESET test for model specification (non-linearity) by adding the square and/or the cube of the fitted values to the regression and calculating the <@itl="F"> statistic for the null hypothesis that the parameters on the added terms are zero. 

Both the square and the cube are added, unless one of the options <@opt="--⁠squares-only"> or <@opt="--⁠cubes-only"> is given. 

Menu path: Model window, /Tests/Ramsey's RESET

# restrict Tests

Options: 	<@lit="--quiet"> (don't print restricted estimates)
		<@lit="--silent"> (don't print anything)
		<@lit="--wald"> (system estimators only – see below)
		<@lit="--bootstrap"> (bootstrap the test if possible)
		<@lit="--full"> (OLS and VECMs only, see below)

Imposes a set of (usually linear) restrictions on either (a) the model last estimated or (b) a system of equations previously defined and named. In all cases the set of restrictions should be started with the keyword "restrict" and terminated with "end restrict". 

In the single equation case the restrictions are always implicitly to be applied to the last model, and they are evaluated as soon as the <@lit="restrict"> block is closed. 

In the case of a system of equations (defined via the <@ref="system"> command), the initial "restrict" may be followed by the name of a previously defined system of equations. If this is omitted and the last model was a system then the restrictions are applied to the last model. By default the restrictions are evaluated when the system is next estimated, using the <@ref="estimate"> command. But if the <@opt="--⁠wald"> option is given the restriction is tested right away, via a Wald chi-square test on the covariance matrix. Note that this option will produce an error if a system has been defined but not yet estimated. 

Depending on the context, the restrictions to be tested may be expressed in various ways. The simplest form is as follows: each restriction is given as an equation, with a linear combination of parameters on the left and a scalar value to the right of the equals sign (either a numerical constant or the name of a scalar variable). 

In the single-equation case, parameters may be referenced in the form <@lit="b["><@var="i"><@lit="]">, where <@var="i"> represents the position in the list of regressors (starting at 1), or <@lit="b["><@var="varname"><@lit="]">, where <@var="varname"> is the name of the regressor in question. In the system case, parameters are referenced using <@lit="b"> plus two numbers in square brackets. The leading number represents the position of the equation within the system and the second number indicates position in the list of regressors. For example <@lit="b[2,1]"> denotes the first parameter in the second equation, and <@lit="b[3,2]"> the second parameter in the third equation. The <@lit="b"> terms in the equation representing a restriction may be prefixed with a numeric multiplier, for example <@lit="3.5*b[4]">. 

Here is an example of a set of restrictions for a previously estimated model: 

<code>          
   restrict
    b[1] = 0
    b[2] - b[3] = 0
    b[4] + 2*b[5] = 1
   end restrict
</code>

And here is an example of a set of restrictions to be applied to a named system. (If the name of the system does not contain spaces, the surrounding quotes are not required.) 

<code>          
   restrict "System 1"
    b[1,1] = 0
    b[1,2] - b[2,2] = 0
    b[3,4] + 2*b[3,5] = 1
   end restrict
</code>

In the single-equation case the restrictions are by default evaluated via a Wald test, using the covariance matrix of the model in question. If the original model was estimated via OLS then the restricted coefficient estimates are printed; to suppress this, append the <@opt="--⁠quiet"> option flag to the initial <@lit="restrict"> command. As an alternative to the Wald test, for models estimated via OLS or WLS only, you can give the <@opt="--⁠bootstrap"> option to perform a bootstrapped test of the restriction. 

In the system case, the test statistic depends on the estimator chosen: a Likelihood Ratio test if the system is estimated using a Maximum Likelihood method, or an asymptotic <@itl="F">-test otherwise. 

There are two alternatives to the method of expressing restrictions discussed above. First, a set of <@itl="g"> linear restrictions on a <@itl="k">-vector of parameters, β, may be written compactly as <@itl="R">β – <@itl="q"> = 0, where <@itl="R"> is an <@itl="g">×<@itl="k"> matrix and <@itl="q"> is a <@itl="g">-vector. You can specify a restriction by giving the names of pre-defined, conformable matrices to be used as <@itl="R"> and <@itl="q">, as in 

<code>          
   restrict 
     R = Rmat
     q = qvec
   end restrict
</code>

Secondly, if you wish to test a nonlinear restriction (this is currently available for single-equation models only) you should give the restriction as the name of a function, preceded by "<@lit="rfunc = ">", as in 

<code>          
   restrict
     rfunc = myfunction
   end restrict
</code>

The constraint function should take a single <@lit="const matrix"> argument; this will be automatically filled out with the parameter vector. And it should return a vector which is zero under the null hypothesis, non-zero otherwise. The length of the vector is the number of restrictions. This function is used as a "callback" by gretl's numerical Jacobian routine, which calculates a Wald test statistic via the delta method. 

Here is a simple example of a function suitable for testing one nonlinear restriction, namely that two pairs of parameter values have a common ratio. 

<code>          
   function matrix restr (const matrix b)
     matrix v = b[1]/b[2] - b[4]/b[5]
     return v
   end function
</code>

On successful completion of the <@lit="restrict"> command the accessors <@lit="$test"> and <@lit="$pvalue"> give the test statistic and its p-value. 

When testing restrictions on a single-equation model estimated via OLS, or on a VECM, the <@opt="--⁠full"> option can be used to set the restricted estimates as the "last model" for the purposes of further testing or the use of accessors such as <@lit="$coeff"> and <@lit="$vcv">. Note that some special considerations apply in the case of testing restrictions on Vector Error Correction Models. Please see <@pdf="the Gretl User's Guide"> for details. 

Menu path: Model window, /Tests/Linear restrictions

# rmplot Graphs

Argument: 	<@var="series"> 
Options: 	<@lit="--trim"> (see below)
		<@lit="--quiet"> (suppress printed output)

Range–mean plot: this command creates a simple graph to help in deciding whether a time series, <@itl="y">(t), has constant variance or not. We take the full sample t=1,...,T and divide it into small subsamples of arbitrary size <@itl="k">. The first subsample is formed by <@itl="y">(1),...,<@itl="y">(k), the second is <@itl="y">(k+1), ..., <@itl="y">(2k), and so on. For each subsample we calculate the sample mean and range (= maximum minus minimum), and we construct a graph with the means on the horizontal axis and the ranges on the vertical. So each subsample is represented by a point in this plane. If the variance of the series is constant we would expect the subsample range to be independent of the subsample mean; if we see the points approximate an upward-sloping line this suggests the variance of the series is increasing in its mean; and if the points approximate a downward sloping line this suggests the variance is decreasing in the mean. 

Besides the graph, gretl displays the means and ranges for each subsample, along with the slope coefficient for an OLS regression of the range on the mean and the p-value for the null hypothesis that this slope is zero. If the slope coefficient is significant at the 10 percent significance level then the fitted line from the regression of range on mean is shown on the graph. The <@itl="t">-statistic for the null, and the corresponding p-value, are recorded and may be retrieved using the accessors <@lit="$test"> and <@lit="$pvalue"> respectively. 

If the <@opt="--⁠trim"> option is given, the minimum and maximum values in each sub-sample are discarded before calculating the mean and range. This makes it less likely that outliers will distort the analysis. 

If the <@opt="--⁠quiet"> option is given, no graph is shown and no output is printed; only the <@itl="t">-statistic and p-value are recorded. 

Menu path: /Variable/Range-mean graph

# run Programming

Argument: 	<@var="filename"> 

Executes the commands in <@var="filename"> then returns control to the interactive prompt. This command is intended for use with the command-line program gretlcli, or at the "gretl console" in the GUI program. 

See also <@ref="include">. 

Menu path: Run icon in script window

# runs Tests

Argument: 	<@var="series"> 
Options: 	<@lit="--difference"> (use first difference of variable)
		<@lit="--equal"> (positive and negative values are equiprobable)

Carries out the nonparametric "runs" test for randomness of the specified <@var="series">, where runs are defined as sequences of consecutive positive or negative values. If you want to test for randomness of deviations from the median, for a variable named <@lit="x1"> with a non-zero median, you can do the following: 

<code>          
   series signx1 = x1 - median(x1)
   runs signx1
</code>

If the <@opt="--⁠difference"> option is given, the variable is differenced prior to the analysis, hence the runs are interpreted as sequences of consecutive increases or decreases in the value of the variable. 

If the <@opt="--⁠equal"> option is given, the null hypothesis incorporates the assumption that positive and negative values are equiprobable, otherwise the test statistic is invariant with respect to the "fairness" of the process generating the sequence, and the test focuses on independence alone. 

Menu path: /Tools/Nonparametric tests

# scatters Graphs

Arguments: 	<@var="yvar"> ; <@var="xvars"> or <@var="yvars ; xvar"> 
Options: 	<@lit="--with-lines"> (create line graphs)
		<@lit="--matrix">=<@var="name"> (plot columns of named matrix)
		<@lit="--output">=<@var="filename"> (send output to specified file)
		<@lit="--output">=<@var="filename"> (send output to specified file)
Examples: 	<@lit="scatters 1 ; 2 3 4 5">
		<@lit="scatters 1 2 3 4 5 6 ; 7">
		<@lit="scatters y1 y2 y3 ; x --with-lines">

Generates pairwise graphs of <@var="yvar"> against all the variables in <@var="xvars">, or of all the variables in <@var="yvars"> against <@var="xvar">. The first example above puts variable 1 on the <@itl="y">-axis and draws four graphs, the first having variable 2 on the <@itl="x">-axis, the second variable 3 on the <@itl="x">-axis, and so on. The second example plots each of variables 1 through 6 against variable 7 on the <@itl="x">-axis. Scanning a set of such plots can be a useful step in exploratory data analysis. The maximum number of plots is 16; any extra variable in the list will be ignored. 

By default the graphs are scatterplots, but if you give the <@opt="--⁠with-lines"> flag they will be line graphs. 

For details on usage of the <@opt="--⁠output"> option, please see the <@ref="gnuplot"> command. 

If a named matrix is specified as the data source the <@var="x"> and <@var="y"> lists should be given as 1-based column numbers; or alternatively, if no such numbers are given, all the columns are plotted against time or an index variable. 

If the dataset is time-series, then the second sub-list can be omitted, in which case it will implicitly be taken as "time", so you can plot multiple time series in separated sub-graphs 

Menu path: /View/Multiple graphs

# sdiff Transformations

Argument: 	<@var="varlist"> 

The seasonal difference of each variable in <@var="varlist"> is obtained and the result stored in a new variable with the prefix <@lit="sd_">. This command is available only for seasonal time series. 

Menu path: /Add/Seasonal differences of selected variables

# set Programming

Variants: 	<@lit="set"> <@var="variable"> <@var="value">
		<@lit="set --to-file="><@var="filename">
		<@lit="set --from-file="><@var="filename">
		<@lit="set stopwatch">
		<@lit="set">
Examples: 	<@lit="set svd on">
		<@lit="set csv_delim tab">
		<@lit="set horizon 10">
		<@lit="set --to-file=mysettings.inp">

The most common use of this command is the first variant shown above, where it is used to set the value of a selected program parameter. This is discussed in detail below. The other uses are: with <@opt="--⁠to-file">, to write a script file containing all the current parameter settings; with <@opt="--⁠from-file"> to read a script file containing parameter settings and apply them to the current session; with <@lit="stopwatch"> to zero the gretl "stopwatch" which can be used to measure CPU time (see the entry for the <@lit="$stopwatch"> accessor in the gretl function reference); or, if the word <@lit="set"> is given alone, to print the current settings. 

Values set via this comand remain in force for the duration of the gretl session unless they are changed by a further call to <@lit="set">. The parameters that can be set in this way are enumerated below. Note that the settings of <@lit="hc_version">, <@lit="hac_lag"> and <@lit="hac_kernel"> are used when the <@opt="--⁠robust"> option is given to an estimation command. 

The available settings are grouped under the following categories: program interaction and behavior, numerical methods, random number generation, robust estimation, filtering, time series estimation, and interaction with GNU R. 

<@itl="Program interaction and behavior"> 

These settings are used for controlling various aspects of the way gretl interacts with the user. 

<indent>
• <@lit="csv_delim">: either <@lit="comma"> (the default), <@lit="space">, <@lit="tab"> or <@lit="semicolon">. Sets the column delimiter used when saving data to file in CSV format. 
</indent>

<indent>
• <@lit="csv_write_na">: the string used to represent missing values when writing data to file in CSV format. Maximum 7 characters; the default is <@lit="NA">. 
</indent>

<indent>
• <@lit="csv_read_na">: the string taken to represent missing values (NAs) when reading data in CSV format. Maximum 7 characters. The default depends on whether a data column is found to contain numerical data (mostly) or string values. For numerical data the following are taken as indicating NAs: an empty cell, or any of the strings <@lit="NA">, <@lit="N.A.">, <@lit="na">, <@lit="n.a.">, <@lit="N/A">, <@lit="#N/A">, <@lit="NaN">, <@lit=".NaN">, <@lit=".">, <@lit="..">, <@lit="-999">, and <@lit="-9999">. For string-valued data only a blank cell, or a cell containing an empty string, is counted as NA. These defaults can be reimposed by giving <@lit="default"> as the value for <@lit="csv_read_na">. To specify that only empty cells are read as NAs, give a value of <@lit="""">. Note that empty cells are always read as NAs regardless of the setting of this variable. 
</indent>

<indent>
• <@lit="csv_digits">: a positive integer specifying the number of significant digits to use when writing data in CSV format. By default up to 15 digits are used depending on the precision of the original data. Note that CSV output employs the C library's <@lit="fprintf"> function with "<@lit="%g">" conversion, which means that trailing zeros are dropped. 
</indent>

<indent>
• <@lit="echo">: <@lit="off"> or <@lit="on"> (the default). Suppress or resume the echoing of commands in gretl's output. 
</indent>

<indent>
• <@lit="force_decpoint">: <@lit="on"> or <@lit="off"> (the default). Force gretl to use the decimal point character, in a locale where another character (most likely the comma) is the standard decimal separator. 
</indent>

<indent>
• <@lit="halt_on_error">: <@lit="off"> or <@lit="on"> (the default). By default, when an error is encountered in the course of executing a script, execution is halted (and if the command-line program is operating in batch mode, it exits with a non-zero return status). You can force gretl to continue on error by setting <@lit="halt_on_error"> to <@lit="off"> (or by setting the environment variable <@lit="GRETL_KEEP_GOING"> to 1). If an error occurs while "compiling" a loop or user-defined function, however, execution is halted regardless. 
</indent>

<indent>
• <@lit="loop_maxiter">: one non-negative integer value (default 100000). Sets the maximum number of iterations that a <@lit="while"> loop is allowed before halting (see <@ref="loop">). Note that this setting only affects the <@lit="while"> variant; its purpose is to guard against inadvertently infinite loops. Setting this value to 0 has the effect of disabling the limit; use with caution. 
</indent>

<indent>
• <@lit="max_verbose">: <@lit="on"> or <@lit="off"> (the default). Toggles verbose output for the <@lit="BFGSmax"> and <@lit="NRmax"> functions (see the User's Guide for details). 
</indent>

<indent>
• <@lit="messages">: <@lit="off"> or <@lit="on"> (the default). Suppress or resume the printing of non-error messages associated with various commands, for example when a new variable is generated or when the sample range is changed. 
</indent>

<indent>
• <@lit="warnings">: <@lit="off"> or <@lit="on"> (the default). Suppress or resume the printing of warning messages issued when arithmetical operations produce non-finite values. 
</indent>

<indent>
• <@lit="debug">: <@lit="1">, <@lit="2"> or <@lit="0"> (the default). This is for use with user-defined functions. Setting <@lit="debug"> to 1 is equivalent to turning <@lit="messages"> on within all such functions; setting this variable to <@lit="2"> has the additional effect of turning on <@lit="max_verbose"> within all functions. 
</indent>

<indent>
• <@lit="shell_ok">: <@lit="on"> or <@lit="off"> (the default). Enable launching external programs from gretl via the system shell. This is disabled by default for security reasons, and can only be enabled via the graphical user interface (Tools/Preferences/General). However, once set to on, this setting will remain active for future sessions until explicitly disabled. 
</indent>

<indent>
• <@lit="shelldir">: <@var="path">. Sets the current working directory for shell commands. 
</indent>

<indent>
• <@lit="use_cwd">: <@lit="on"> or <@lit="off"> (the default). This setting affects the behavior of the <@ref="outfile"> and <@ref="store"> commands, which write external files. Normally, the file will be written in the user's default data directory; if <@lit="use_cwd"> is <@lit="on">, on the contrary, the file will be created in the working directory when gretl was started. 
</indent>

<indent>
• <@lit="bfgs_verbskip">: one integer. This setting affects the behavior of the <@opt="--⁠verbose"> option to those commands that use BFGS as an optimization algorithm and is used to compact output. if <@lit="bfgs_verbskip"> is set to, say, 3, then the <@opt="--⁠verbose"> switch will only print iterations 3, 6, 9 and so on. 
</indent>

<indent>
• <@lit="skip_missing">: <@lit="on"> (the default) or <@lit="off">. Controls gretl's behavior when contructing a matrix from data series: the default is to skip data rows that contain one or more missing values but if <@lit="skip_missing"> is set <@lit="off"> missing values are converted to NaNs. 
</indent>

<indent>
• <@lit="matrix_mask">: the name of a series, or the keyword <@lit="null">. Offers greater control than <@lit="skip_missing"> when constructing matrices from series: the data rows selected for matrices are those with non-zero (and non-missing) values in the specified series. The selected mask remains in force until it is replaced, or removed via the <@lit="null"> keyword. 
</indent>

<indent>
• <@lit="huge">: a large positive number (by default, 1.0E100). This setting controls the value returned by the accessor <@xrf="$huge">. 
</indent>

<@itl="Numerical methods"> 

These settings are used for controlling the numerical algorithms that gretl uses for estimation. 

<indent>
• <@lit="optimizer">: either <@lit="auto"> (the default), <@lit="BFGS"> or <@lit="newton">. Sets the optimization algorithm used for various ML estimators, in cases where both BFGS and Newton–Raphson are applicable. The default is to use Newton–Raphson where an analytical Hessian is available, otherwise BFGS. 
</indent>

<indent>
• <@lit="bhhh_maxiter">: one integer, the maximum number of iterations for gretl's internal BHHH routine, which is used in the <@lit="arma"> command for conditional ML estimation. If convergence is not achieved after <@lit="bhhh_maxiter">, the program returns an error. The default is set at 500. 
</indent>

<indent>
• <@lit="bhhh_toler">: one floating point value, or the string <@lit="default">. This is used in gretl's internal BHHH routine to check if convergence has occurred. The algorithm stops iterating as soon as the increment in the log-likelihood between iterations is smaller than <@lit="bhhh_toler">. The default value is 1.0E–06; this value may be re-established by typing <@lit="default"> in place of a numeric value. 
</indent>

<indent>
• <@lit="bfgs_maxiter">: one integer, the maximum number of iterations for gretl's BFGS routine, which is used for <@lit="mle">, <@lit="gmm"> and several specific estimators. If convergence is not achieved in the specified number of iterations, the program returns an error. The default value depends on the context, but is typically of the order of 500. 
</indent>

<indent>
• <@lit="bfgs_toler">: one floating point value, or the string <@lit="default">. This is used in gretl's BFGS routine to check if convergence has occurred. The algorithm stops as soon as the relative improvement in the objective function between iterations is smaller than <@lit="bfgs_toler">. The default value is the machine precision to the power 3/4; this value may be re-established by typing <@lit="default"> in place of a numeric value. 
</indent>

<indent>
• <@lit="bfgs_maxgrad">: one floating point value. This is used in gretl's BFGS routine to check if the norm of the gradient is reasonably close to zero when the <@lit="bfgs_toler"> criterion is met. A warning is printed if the norm of the gradient exceeds 1; an error is flagged if the norm exceeds <@lit="bfgs_maxgrad">. At present the default is the permissive value of 5.0. 
</indent>

<indent>
• <@lit="bfgs_richardson">: <@lit="on"> or <@lit="off"> (the default). Use Richardson extrapolation when computing numerical derivatives in the context of BFGS maximization. 
</indent>

<indent>
• <@lit="initvals">: either <@lit="auto"> (the default) or the name of a pre-specified matrix. Allows manual setting of the initial parameter estimates for numerical optimization problems (such as ARMA estimation). For details see <@pdf="the Gretl User's Guide">. 
</indent>

<indent>
• <@lit="lbfgs">: <@lit="on"> or <@lit="off"> (the default). Use the limited-memory version of BFGS (L-BFGS-B) instead of the ordinary algorithm. This may be advantageous when the function to be maximized is not globally concave. 
</indent>

<indent>
• <@lit="lbfgs_mem">: an integer value in the range 3 to 20 (with a default value of 8). This determines the number of corrections used in the limited memory matrix when L-BFGS-B is employed. 
</indent>

<indent>
• <@lit="nls_toler">: a floating-point value (the default is the machine precision to the power 3/4). Sets the tolerance used in judging whether or not convergence has occurred in nonlinear least squares estimation using the <@ref="nls"> command. 
</indent>

<indent>
• <@lit="svd">: <@lit="on"> or <@lit="off"> (the default). Use SVD rather than Cholesky or QR decomposition in least squares calculations. This option applies to the <@lit="mols"> function as well as various internal calculations, but not to the regular <@ref="ols"> command. 
</indent>

<indent>
• <@lit="fcp">: <@lit="on"> or <@lit="off"> (the default). Use the algorithm of Fiorentini, Calzolari and Panattoni rather than native gretl code when computing GARCH estimates. 
</indent>

<indent>
• <@lit="gmm_maxiter">: one integer, the maximum number of iterations for gretl's <@ref="gmm"> command when in iterated mode (as opposed to one- or two-step). The default value is 250. 
</indent>

<indent>
• <@lit="nadarwat_trim">: one integer, the trim parameter used in the <@xrf="nadarwat"> function. 
</indent>

<indent>
• <@lit="fdjac_quality">: one integer between 0 and 2, the algorithm used by the <@xrf="fdjac"> function. 
</indent>

<@itl="Random number generation"> 

<indent>
• <@lit="seed">: an unsigned integer. Sets the seed for the pseudo-random number generator. By default this is set from the system time; if you want to generate repeatable sequences of random numbers you must set the seed manually. 
</indent>

<indent>
• <@lit="normal_rand">: <@lit="ziggurat"> (the default) or <@lit="box-muller">. Sets the method for generating random normal samples based on uniform input. 
</indent>

<@itl="Robust estimation"> 

<indent>
• <@lit="bootrep">: an integer. Sets the number of replications for the <@ref="restrict"> command with the <@opt="--⁠bootstrap"> option. 
</indent>

<indent>
• <@lit="garch_vcv">: <@lit="unset">, <@lit="hessian">, <@lit="im"> (information matrix) , <@lit="op"> (outer product matrix), <@lit="qml"> (QML estimator), <@lit="bw"> (Bollerslev–Wooldridge). Specifies the variant that will be used for estimating the coefficient covariance matrix, for GARCH models. If <@lit="unset"> is given (the default) then the Hessian is used unless the "robust" option is given for the garch command, in which case QML is used. 
</indent>

<indent>
• <@lit="arma_vcv">: <@lit="hessian"> (the default) or <@lit="op"> (outer product matrix). Specifies the variant to be used when computing the covariance matrix for ARIMA models. 
</indent>

<indent>
• <@lit="force_hc">: <@lit="off"> (the default) or <@lit="on">. By default, with time-series data and when the <@opt="--⁠robust"> option is given with <@lit="ols">, the HAC estimator is used. If you set <@lit="force_hc"> to "on", this forces calculation of the regular Heteroskedasticity Consistent Covariance Matrix (HCCM), which does not take autocorrelation into account. Note that VARs are treated as a special case: when the <@opt="--⁠robust"> option is given the default method is regular HCCM, but the <@opt="--⁠robust-hac"> flag can be used to force the use of a HAC estimator. 
</indent>

<indent>
• <@lit="hac_lag">: <@lit="nw1"> (the default), <@lit="nw2">, <@lit="nw3"> or an integer. Sets the maximum lag value or bandwidth, <@itl="p">, used when calculating HAC (Heteroskedasticity and Autocorrelation Consistent) standard errors using the Newey-West approach, for time series data. <@lit="nw1"> and <@lit="nw2"> represent two variant automatic calculations based on the sample size, <@itl="T">: for nw1, <@fig="nw1">, and for nw2, <@fig="nw2">. <@lit="nw3"> calls for data-based bandwidth selection. See also <@lit="qs_bandwidth"> and <@lit="hac_prewhiten"> below. 
</indent>

<indent>
• <@lit="hac_kernel">: <@lit="bartlett"> (the default), <@lit="parzen">, or <@lit="qs"> (Quadratic Spectral). Sets the kernel, or pattern of weights, used when calculating HAC standard errors. 
</indent>

<indent>
• <@lit="hac_prewhiten">: <@lit="on"> or <@lit="off"> (the default). Use Andrews-Monahan prewhitening and re-coloring when computing HAC standard errors. This also implies use of data-based bandwidth selection. 
</indent>

<indent>
• <@lit="hc_version">: 0 (the default), 1, 2, 3 or 3a. Sets the variant used when calculating Heteroskedasticity Consistent standard errors with cross-sectional data. The first four options correspond to the HC0, HC1, HC2 and HC3 discussed by Davidson and MacKinnon in <@itl="Econometric Theory and Methods">, chapter 5. HC0 produces what are usually called "White's standard errors". Variant 3a is the MacKinnon–White "jackknife" procedure. 
</indent>

<indent>
• <@lit="pcse">: <@lit="off"> (the default) or <@lit="on">. By default, when estimating a model using pooled OLS on panel data with the <@opt="--⁠robust"> option, the Arellano estimator is used for the covariance matrix. If you set <@lit="pcse"> to "on", this forces use of the Beck and Katz Panel Corrected Standard Errors (which do not take autocorrelation into account). 
</indent>

<indent>
• <@lit="qs_bandwidth">: Bandwidth for HAC estimation in the case where the Quadratic Spectral kernel is selected. (Unlike the Bartlett and Parzen kernels, the QS bandwidth need not be an integer.) 
</indent>

<@itl="Time series"> 

<indent>
• <@lit="horizon">: one integer (the default is based on the frequency of the data). Sets the horizon for impulse responses and forecast variance decompositions in the context of vector autoregressions. 
</indent>

<indent>
• <@lit="vecm_norm">: <@lit="phillips"> (the default), <@lit="diag">, <@lit="first"> or <@lit="none">. Used in the context of VECM estimation via the <@ref="vecm"> command for identifying the cointegration vectors. See the <@pdf="the Gretl User's Guide"> for details. 
</indent>

<@itl="Interaction with R"> 

<indent>
• <@lit="R_lib">: <@lit="on ">(the default) or <@lit="off">. When sending instructions to be executed by R, use the R shared library by preference to the R executable, if the library is available. 
</indent>

<indent>
• <@lit="R_functions">: <@lit="off"> (the default) or <@lit="on">. Recognize functions defined in R as if they were native functions (the namespace prefix "<@lit="R.">" is required). See <@pdf="the Gretl User's Guide"> for details on this and the previous item. 
</indent>

# setinfo Dataset

Argument: 	<@var="series"> 
Options: 	<@lit="--description">=<@var="string"> (set description)
		<@lit="--graph-name">=<@var="string"> (set graph name)
		<@lit="--discrete"> (mark series as discrete)
		<@lit="--continuous"> (mark series as continuous)
Examples: 	<@lit="setinfo x1 --description="Description of x1"">
		<@lit="setinfo y --graph-name="Some string"">
		<@lit="setinfo z --discrete">

Sets up to three attributes of <@var="series">, given by name or ID number, as follows. 

If the <@opt="--⁠description"> flag is given followed by a string in double quotes, that string is used to set the variable's descriptive label. This label is shown in response to the <@ref="labels"> command, and is also shown in the main window of the GUI program. 

If the <@opt="--⁠graph-name"> flag is given followed by a quoted string, that string will be used in place of the variable's name in graphs. 

If one or other of the <@opt="--⁠discrete"> or <@opt="--⁠continuous"> option flags is given, the variable's numerical character is set accordingly. The default is to treat all series as continuous; setting a series as discrete affects the way the variable is handled in frequency plots. 

Menu path: /Variable/Edit attributes
Other access: Main window pop-up menu

# setmiss Dataset

Arguments: 	<@var="value"> [ <@var="varlist"> ] 
Examples: 	<@lit="setmiss -1">
		<@lit="setmiss 100 x2">

Get the program to interpret some specific numerical data value (the first parameter to the command) as a code for "missing", in the case of imported data. If this value is the only parameter, as in the first example above, the interpretation will be applied to all series in the data set. If <@var="value"> is followed by a list of variables, by name or number, the interpretation is confined to the specified variable(s). Thus in the second example the data value 100 is interpreted as a code for "missing", but only for the variable <@lit="x2">. 

Menu path: /Data/Set missing value code

# setobs Dataset

Variants: 	<@lit="setobs"> <@var="periodicity"> <@var="startobs">
		<@lit="setobs"> <@var="unitvar"> <@var="timevar"> <@lit="--panel-vars">
Options: 	<@lit="--cross-section"> (interpret as cross section)
		<@lit="--time-series"> (interpret as time series)
		<@lit="--stacked-cross-section"> (interpret as panel data)
		<@lit="--stacked-time-series"> (interpret as panel data)
		<@lit="--panel-vars"> (use index variables, see below)
		<@lit="--panel-time"> (see below)
		<@lit="--panel-groups"> (see below)
Examples: 	<@lit="setobs 4 1990:1 --time-series">
		<@lit="setobs 12 1978:03">
		<@lit="setobs 1 1 --cross-section">
		<@lit="setobs 20 1:1 --stacked-time-series">
		<@lit="setobs unit year --panel-vars">

This command forces the program to interpret the current data set as having a specified structure. 

In the first form of the command the <@var="periodicity">, which must be an integer, represents frequency in the case of time-series data (1 = annual; 4 = quarterly; 12 = monthly; 52 = weekly; 5, 6, or 7 = daily; 24 = hourly). In the case of panel data the periodicity means the number of lines per data block: this corresponds to the number of cross-sectional units in the case of stacked cross-sections, or the number of time periods in the case of stacked time series. In the case of simple cross-sectional data the periodicity should be set to 1. 

The starting observation represents the starting date in the case of time series data. Years may be given with two or four digits; subperiods (for example, quarters or months) should be separated from the year with a colon. In the case of panel data the starting observation should be given as 1:1; and in the case of cross-sectional data, as 1. Starting observations for daily or weekly data should be given in the form YYYY-MM-DD (or simply as 1 for undated data). 

If no explicit option flag is given to indicate the structure of the data the program will attempt to guess the structure from the information given. 

The second form of the command (which requires the <@opt="--⁠panel-vars"> flag) may be used to impose a panel interpretation when the data set contains variables that uniquely identify the cross-sectional units and the time periods. The data set will be sorted as stacked time series, by ascending values of the units variable, <@var="unitvar">. 

<@itl="Panel-specific options"> 

The <@opt="--⁠panel-time"> and <@opt="--⁠panel-groups"> options can only be used with a dataset which has already been defined as a panel. 

The purpose of <@opt="--⁠panel-time"> is to set extra information regarding the time dimension of the panel. This should be given on the pattern of the first form of <@lit="setobs"> noted above. For example, the following may be used to indicate that the time dimension of a panel is quarterly, starting in the first quarter of 1990. 

<code>          
   setobs 4 1990:1 --panel-time
</code>

The purpose of <@opt="--⁠panel-groups"> is to create a string-valued series holding names for the groups (individuals, cross-sectional units) in the panel. With this option you must supply a name for the series and a string variable holding a list of group names (in that order). The names should be separated by spaces; if a name includes spaces it should be wrapped in backslash-escaped double-quotes. For example, the following will create a series named <@lit="country"> in which the names in <@lit="cstrs"> are each repeated <@itl="T"> times, <@itl="T"> being the time-series length of the panel. 

<code>          
   string cstrs
   sprintf cstrs "France Germany Italy \"United Kingdom\""
   setobs country cstrs --panel-groups
</code>

Menu path: /Data/Dataset structure

# shell Utilities

Argument: 	<@var="shellcommand"> 
Examples: 	<@lit="! ls -al">
		<@lit="! notepad">
		<@lit="launch notepad">

A <@lit="!">, or the keyword <@lit="launch">, at the beginning of a command line is interpreted as an escape to the user's shell. Thus arbitrary shell commands can be executed from within gretl. When <@lit="!"> is used, the external command is executed synchronously. That is, gretl waits for it to complete before proceeding. If you want to start another program from within gretl and not wait for its completion (asynchronous operation), use <@lit="launch"> instead. 

For reasons of security this facility is not enabled by default. To activate it, check the box titled "Allow shell commands" under the File, Preferences menu in the GUI program. This also makes shell commands available in the command-line program (and is the only way to do so). 

# smpl Dataset

Variants: 	<@lit="smpl"> <@var="startobs endobs">
		<@lit="smpl"> <@var="+i -j">
		<@lit="smpl"> <@var="dumvar"> <@lit="--dummy">
		<@lit="smpl"> <@var="condition"> <@lit="--restrict">
		<@lit="smpl"> <@lit="--no-missing [ "><@var="varlist"> <@lit="]">
		<@lit="smpl"> <@lit="--contiguous [ "><@var="varlist"> <@lit="]">
		<@lit="smpl"> <@var="n"> <@lit="--random">
		<@lit="smpl full">
Options: 	<@lit="--dummy"> (argument is a dummy variable)
		<@lit="--restrict"> (apply boolean restriction)
		<@lit="--replace"> (replace any existing boolean restriction)
		<@lit="--no-missing"> (restrict to valid observations)
		<@lit="--contiguous"> (see below)
		<@lit="--random"> (form random sub-sample)
		<@lit="--balanced"> (panel data: try to retain balanced panel)
Examples: 	<@lit="smpl 3 10">
		<@lit="smpl 1960:2 1982:4">
		<@lit="smpl +1 -1">
		<@lit="smpl x > 3000 --restrict">
		<@lit="smpl y > 3000 --restrict --replace">
		<@lit="smpl 100 --random">

Resets the sample range. The new range can be defined in several ways. In the first alternate form (and the first two examples) above, <@var="startobs"> and <@var="endobs"> must be consistent with the periodicity of the data. Either one may be replaced by a semicolon to leave the value unchanged. In the second form, the integers <@var="i"> and <@var="j"> (which may be positive or negative, and should be signed) are taken as offsets relative to the existing sample range. In the third form <@var="dummyvar"> must be an indicator variable with values 0 or 1 at each observation; the sample will be restricted to observations where the value is 1. The fourth form, using <@opt="--⁠restrict">, restricts the sample to observations that satisfy the given Boolean condition (which is specified according to the syntax of the <@ref="genr"> command). 

With the <@opt="--⁠no-missing"> form, if <@var="varlist"> is specified observations are selected on condition that all variables in <@var="varlist"> have valid values at that observation; otherwise, if no <@var="varlist"> is given, observations are selected on condition that <@itl="all"> variables have valid (non-missing) values. 

The <@opt="--⁠contiguous"> form of <@lit="smpl"> is intended for use with time series data. The effect is to trim any observations at the start and end of the current sample range that contain missing values (either for the variables in <@var="varlist">, or for all data series if no <@var="varlist"> is given). Then a check is performed to see if there are any missing values in the remaining range; if so, an error is flagged. 

With the <@opt="--⁠random"> flag, the specified number of cases are selected from the current dataset at random (without replacement). If you wish to be able to replicate this selection you should set the seed for the random number generator first (see the <@ref="set"> command). 

The final form, <@lit="smpl full">, restores the full data range. 

Note that sample restrictions are, by default, cumulative: the baseline for any <@lit="smpl"> command is the current sample. If you wish the command to act so as to replace any existing restriction you can add the option flag <@opt="--⁠replace"> to the end of the command. (But this option is not compatible with the <@opt="--⁠contiguous"> option.) 

The internal variable <@lit="obs"> may be used with the <@opt="--⁠restrict"> form of <@lit="smpl"> to exclude particular observations from the sample. For example 

<code>          
   smpl obs!=4 --restrict
</code>

will drop just the fourth observation. If the data points are identified by labels, 

<code>          
   smpl obs!="USA" --restrict
</code>

will drop the observation with label "USA". 

One point should be noted about the <@opt="--⁠dummy">, <@opt="--⁠restrict"> and <@opt="--⁠no-missing"> forms of <@lit="smpl">: "structural" information in the data file (regarding the time series or panel nature of the data) is likely to be lost when this command is issued. You may reimpose structure with the <@ref="setobs"> command. A related option, for use with panel data, is the <@opt="--⁠balanced"> flag: this requests that a balanced panel is reconstituted after sub-sampling, via the insertion of "missing rows" if need be. But note that it is not always possible to comply with this request. 

Please see <@pdf="the Gretl User's Guide"> for further details. 

Menu path: /Sample

# spearman Statistics

Arguments: 	<@var="series1"> <@var="series2"> 
Option: 	<@lit="--verbose"> (print ranked data)

Prints Spearman's rank correlation coefficient for the series <@var="series1"> and <@var="series2">. The variables do not have to be ranked manually in advance; the function takes care of this. 

The automatic ranking is from largest to smallest (i.e. the largest data value gets rank 1). If you need to invert this ranking, create a new variable which is the negative of the original. For example: 

<code>          
   series altx = -x
   spearman altx y
</code>

Menu path: /Model/Robust estimation/Rank correlation

# sprintf Printing

Arguments: 	<@var="stringvar"> <@var="format"> <@lit=", "><@var="args"> 

This command works exactly like the <@ref="printf"> command, printing the given arguments under the control of the format string, except that the result is written into the named string, <@var="stringvar">. 

# square Transformations

Argument: 	<@var="varlist"> 
Option: 	<@lit="--cross"> (generate cross-products as well as squares)

Generates new series which are squares of the series in <@var="varlist"> (plus cross-products if the <@opt="--⁠cross"> option is given). For example, <@lit="square x y"> will generate <@lit="sq_x"> = <@lit="x"> squared, <@lit="sq_y"> = <@lit="y"> squared and (optionally) <@lit="x_y"> = <@lit="x"> times <@lit="y">. If a particular variable is a dummy variable it is not squared because we will get the same variable. 

Menu path: /Add/Squares of selected variables

# store Dataset

Arguments: 	<@var="filename"> [ <@var="varlist"> ] 
Options: 	<@lit="--csv"> (use CSV format)
		<@lit="--omit-obs"> (see below, on CSV format)
		<@lit="--no-header"> (see below, on CSV format)
		<@lit="--gnu-octave"> (use GNU Octave format)
		<@lit="--gnu-R"> (use GNU R format)
		<@lit="--gzipped">[=<@var="level">] (apply gzip compression)
		<@lit="--jmulti"> (use JMulti ASCII format)
		<@lit="--dat"> (use PcGive ASCII format)
		<@lit="--decimal-comma"> (use comma as decimal character)
		<@lit="--database"> (use gretl database format)
		<@lit="--overwrite"> (see below, on database format)
		<@lit="--comment">=<@var="string"> (see below)

Save data to <@var="filename">. By default all currently defined series are saved but the optional <@var="varlist"> argument can be used to select a subset of series. If the dataset is sub-sampled, only the observations in the current sample range are saved. 

The format in which the data are written may be controlled in the first instance by the extension or suffix of <@var="filename">, as follows: 

<indent>
• <@lit=".gdt">, or no extension: gretl's native XML data format. (If no extension is provided, "<@lit=".gdt">" is added automatically.) 
</indent>

<indent>
• <@lit=".gtdb">: gretl's native binary data format. 
</indent>

<indent>
• <@lit=".csv">: comma-separated values (CSV). 
</indent>

<indent>
• <@lit=".txt"> or <@lit=".asc">: space-separated values. 
</indent>

<indent>
• <@lit=".R">: GNU R format. 
</indent>

<indent>
• <@lit=".m">: GNU Octave format. 
</indent>

The format-related option flags shown above can be used to force the issue of the save format independently of the filename (or to get gretl to write in the formats of PcGive or JMulTi). However, if <@var="filename"> has extension <@lit=".gdt"> or <@lit=".gdtb"> this necessarily implies use of native format and the addition of a conflicting option flag will generate an error. 

When data are saved in native format (only), the <@opt="--⁠gzipped"> option may be used for data compression, which can be useful for large datasets. The optional parameter for this flag controls the level of compression (from 0 to 9): higher levels produce a smaller file, but compression takes longer. The default level is 1; a level of 0 means that no compression is applied. 

The option flags <@opt="--⁠omit-obs"> and <@opt="--⁠no-header"> are applicable only when saving data in CSV format. By default, if the data are time series or panel, or if the dataset includes specific observation markers, the CSV file includes a first column identifying the observations (e.g. by date). If the <@opt="--⁠omit-obs"> flag is given this column is omitted. The <@opt="--⁠no-header"> flag suppresses the usual printing of the names of the variables at the top of the columns. 

The option flag <@opt="--⁠decimal-comma"> is also confined to the case of saving data in CSV format. The effect of this option is to replace the decimal point with the decimal comma; in addition the column separator is forced to be a semicolon. 

The option of saving in gretl database format is intended to help with the construction of large sets of series, possibly having mixed frequencies and ranges of observations. At present this option is available only for annual, quarterly or monthly time-series data. If you save to a file that already exists, the default action is to append the newly saved series to the existing content of the database. In this context it is an error if one or more of the variables to be saved has the same name as a variable that is already present in the database. The <@opt="--⁠overwrite"> flag has the effect that, if there are variable names in common, the newly saved variable replaces the variable of the same name in the original dataset. 

The <@opt="--⁠comment"> option is available when saving data as a database or in CSV format. The required parameter is a double-quoted one-line string, attached to the option flag with an equals sign. The string is inserted as a comment into the database index file or at the top of the CSV output. 

The <@lit="store"> command behaves in a special manner in the context of a "progressive loop". See <@pdf="the Gretl User's Guide"> for details. 

Menu path: /File/Save data; /File/Export data

# summary Statistics

Variants: 	<@lit="summary ["> <@var="varlist"> ]
		<@lit="summary --matrix="><@var="matname">
Options: 	<@lit="--simple"> (basic statistics only)
		<@lit="--weight">=<@var="wvar"> (weighting variable)
		<@lit="--by">=<@var="byvar"> (see below)

In its first form, this command prints summary statistics for the variables in <@var="varlist">, or for all the variables in the data set if <@var="varlist"> is omitted. By default, output consists of the mean, standard deviation (sd), coefficient of variation (= sd/mean), median, minimum, maximum, skewness coefficient, and excess kurtosis. If the <@opt="--⁠simple"> option is given, output is restricted to the mean, minimum, maximum and standard deviation. 

If the <@opt="--⁠by"> option is given (in which case the parameter <@var="byvar"> should be the name of a discrete variable), then statistics are printed for sub-samples corresponding to the distinct values taken on by <@var="byvar">. For example, if <@var="byvar"> is a (binary) dummy variable, statistics are given for the cases <@lit="byvar = 0"> and <@lit="byvar = 1">. Note: at present, this option is incompatible with the <@opt="--⁠weight"> option. 

If the alternative form is given, using a named matrix, then summary statistics are printed for each column of the matrix. The <@opt="--⁠by"> option is not available in this case. 

Menu path: /View/Summary statistics
Other access: Main window pop-up menu

# system Estimation

Variants: 	<@lit="system method="><@var="estimator">
		<@var="sysname"><@lit=" <- system">
Examples: 	<@lit=""Klein Model 1" <- system">
		<@lit="system method=sur">
		<@lit="system method=3sls">
		See also <@inp="klein.inp">, <@inp="kmenta.inp">, <@inp="greene14_2.inp">

Starts a system of equations. Either of two forms of the command may be given, depending on whether you wish to save the system for estimation in more than one way or just estimate the system once. 

To save the system you should assign it a name, as in the first example (if the name contains spaces it must be surrounded by double quotes). In this case you estimate the system using the <@ref="estimate"> command. With a saved system of equations, you are able to impose restrictions (including cross-equation restrictions) using the <@ref="restrict"> command. 

Alternatively you can specify an estimator for the system using <@lit="method="> followed by a string identifying one of the supported estimators: <@lit="ols"> (Ordinary Least Squares), <@lit="tsls"> (Two-Stage Least Squares) <@lit="sur"> (Seemingly Unrelated Regressions), <@lit="3sls"> (Three-Stage Least Squares), <@lit="fiml"> (Full Information Maximum Likelihood) or <@lit="liml"> (Limited Information Maximum Likelihood). In this case the system is estimated once its definition is complete. 

An equation system is terminated by the line <@lit="end system">. Within the system four sorts of statement may be given, as follows. 

<indent>
• <@ref="equation">: specify an equation within the system. At least two such statements must be provided. 
</indent>

<indent>
• <@lit="instr">: for a system to be estimated via Three-Stage Least Squares, a list of instruments (by variable name or number). Alternatively, you can put this information into the <@lit="equation"> line using the same syntax as in the <@ref="tsls"> command. 
</indent>

<indent>
• <@lit="endog">: for a system of simultaneous equations, a list of endogenous variables. This is primarily intended for use with FIML estimation, but with Three-Stage Least Squares this approach may be used instead of giving an <@lit="instr"> list; then all the variables not identified as endogenous will be used as instruments. 
</indent>

<indent>
• <@lit="identity">: for use with FIML, an identity linking two or more of the variables in the system. This sort of statement is ignored when an estimator other than FIML is used. 
</indent>

After estimation using the <@lit="system"> or <@lit="estimate"> commands the following accessors can be used to retrieve additional information: 

<indent>
• <@lit="$uhat">: the matrix of residuals, one column per equation. 
</indent>

<indent>
• <@lit="$yhat">: matrix of fitted values, one column per equation. 
</indent>

<indent>
• <@lit="$coeff">: column vector of coefficients (all the coefficients from the first equation, followed by those from the second equation, and so on). 
</indent>

<indent>
• <@lit="$vcv">: covariance matrix of the coefficients. If there are <@itl="k"> elements in the <@lit="$coeff"> vector, this matrix is <@itl="k"> by <@itl="k">. 
</indent>

<indent>
• <@lit="$sigma">: cross-equation residual covariance matrix. 
</indent>

<indent>
• <@lit="$sysGamma">, <@lit="$sysA"> and <@lit="$sysB">: structural-form coefficient matrices (see below). 
</indent>

If you want to retrieve the residuals or fitted values for a specific equation as a data series, select a column from the <@lit="$uhat"> or <@lit="$yhat"> matrix and assign it to a series, as in 

<code>          
   series uh1 = $uhat[,1]
</code>

The structural-form matrices correspond to the following representation of a simultaneous equations model: 

  <@fig="structural">

If there are <@itl="n"> endogenous variables and <@itl="k"> exogenous variables, Γ is an <@itl="n">×<@itl="n"> matrix and <@itl="B"> is <@itl="n">×<@itl="k">. If the system contains no lags of the endogenous variables then the <@itl="A"> matrix is not present. If the maximum lag of an endogenous regressor is <@itl="p">, the <@itl="A"> matrix is <@itl="n">×<@itl="np">. 

Menu path: /Model/Simultaneous equations

# tabprint Printing

Argument: 	[ <@var="-f filename"> ] 
Options: 	<@lit="--rtf"> (Produce RTF instead of LaTeX)
		<@lit="--csv"> (Produce CSV instead of LaTeX)
		<@lit="--complete"> (Create a complete document)
		<@lit="--format="f1|f2|f3|f4""> (Specify a custom format)

Must follow the estimation of a model. Prints the estimated model in tabular form — by default as LaTeX, but as RTF if the <@opt="--⁠rtf"> flag is given or as CSV is the <@opt="--⁠csv"> flag is given. If a filename is specified using the <@lit="-f"> flag output goes to that file, otherwise it goes to a file with a name of the form <@lit="model_N"> followed by the extension <@lit="tex">, <@lit="rtf"> or <@lit="csv">, where <@lit="N"> is the number of models estimated to date in the current session. 

If CSV format is selected, values are comma-separated unless the decimal comma is in force, in which case the separator is the semicolon. Note that CSV output may be less complete than the other formats. 

The further options discussed below are available only when printing the model as LaTeX. 

If the <@opt="--⁠complete"> flag is given the LaTeX file is a complete document, ready for processing; otherwise it must be included in a document. 

If you wish alter the appearance of the tabular output, you can specify a custom row format using the <@opt="--⁠format"> flag. The format string must be enclosed in double quotes and must be tied to the flag with an equals sign. The pattern for the format string is as follows. There are four fields, representing the coefficient, standard error, <@itl="t">-ratio and p-value respectively. These fields should be separated by vertical bars; they may contain a <@lit="printf">-type specification for the formatting of the numeric value in question, or may be left blank to suppress the printing of that column (subject to the constraint that you can't leave all the columns blank). Here are a few examples: 

<code>          
   --format="%.4f|%.4f|%.4f|%.4f"
   --format="%.4f|%.4f|%.3f|"
   --format="%.5f|%.4f||%.4f"
   --format="%.8g|%.8g||%.4f"
</code>

The first of these specifications prints the values in all columns using 4 decimal places. The second suppresses the p-value and prints the <@itl="t">-ratio to 3 places. The third omits the <@itl="t">-ratio. The last one again omits the <@itl="t">, and prints both coefficient and standard error to 8 significant figures. 

Once you set a custom format in this way, it is remembered and used for the duration of the gretl session. To revert to the default format you can use the special variant <@opt="--⁠format=default">. 

Menu path: Model window, /LaTeX

# textplot Graphs

Argument: 	<@var="varlist"> 
Options: 	<@lit="--time-series"> (plot by observation)
		<@lit="--one-scale"> (force a single scale)
		<@lit="--tall"> (use 40 rows)

Quick and simple ASCII graphics. Without the <@opt="--⁠time-series"> flag, <@var="varlist"> must contain at least two series, the last of which is taken as the variable for the <@itl="x"> axis, and a scatter plot is produced. In this case the <@opt="--⁠tall"> option may be used to produce a graph in which the <@itl="y"> axis is represented by 40 rows of characters (the default is 20 rows). 

With the <@opt="--⁠time-series">, a plot by observation is produced. In this case the option <@opt="--⁠one-scale"> may be used to force the use of a single scale; otherwise if <@var="varlist"> contains more than one series the data may be scaled. Each line represents an observation, with the data values plotted horizontally. 

See also <@ref="gnuplot">. 

# tobit Estimation

Arguments: 	<@var="depvar"> <@var="indepvars"> 
Options: 	<@lit="--llimit">=<@var="lval"> (specify left bound)
		<@lit="--rlimit">=<@var="rval"> (specify right bound)
		<@lit="--vcv"> (print covariance matrix)
		<@lit="--robust"> (robust standard errors)
		<@lit="--cluster">=<@var="clustvar"> (see <@ref="logit"> for explanation)
		<@lit="--verbose"> (print details of iterations)

Estimates a Tobit model, which may be appropriate when the dependent variable is "censored". For example, positive and zero values of purchases of durable goods on the part of individual households are observed, and no negative values, yet decisions on such purchases may be thought of as outcomes of an underlying, unobserved disposition to purchase that may be negative in some cases. 

By default it is assumed that the dependent variable is censored at zero on the left and is uncensored on the right. However you can use the options <@opt="--⁠llimit"> and <@opt="--⁠rlimit"> to specify a different pattern of censoring. Note that if you specify a right bound only, the assumption is then that the dependent variable is uncensored on the left. 

The Tobit model is a special case of interval regression, which is supported via the <@ref="intreg"> command. 

Menu path: /Model/Limited dependent variable/Tobit

# tsls Estimation

Arguments: 	<@var="depvar"> <@var="indepvars"> ; <@var="instruments"> 
Options: 	<@lit="--no-tests"> (don't do diagnostic tests)
		<@lit="--vcv"> (print covariance matrix)
		<@lit="--robust"> (robust standard errors)
		<@lit="--cluster">=<@var="clustvar"> (clustered standard errors)
		<@lit="--liml"> (use Limited Information Maximum Likelihood)
		<@lit="--gmm"> (use the Generalized Method of Moments)
Example: 	<@lit="tsls y1 0 y2 y3 x1 x2 ; 0 x1 x2 x3 x4 x5 x6">

Computes Instrumental Variables (IV) estimates, by default using two-stage least squares (TSLS) but see below for further options. The dependent variable is <@var="depvar">, <@var="indepvars"> is the list of regressors (which is presumed to include at least one endogenous variable); and <@var="instruments"> is the list of instruments (exogenous and/or predetermined variables). If the <@var="instruments"> list is not at least as long as <@var="indepvars">, the model is not identified. 

In the above example, the <@lit="y">s are endogenous and the <@lit="x">s are the exogenous variables. Note that exogenous regressors should appear in both lists. 

Output for two-stage least squares estimates includes the Hausman test and, if the model is over-identified, the Sargan over-identification test. In the Hausman test, the null hypothesis is that OLS estimates are consistent, or in other words estimation by means of instrumental variables is not really required. A model of this sort is over-identified if there are more instruments than are strictly required. The Sargan test is based on an auxiliary regression of the residuals from the two-stage least squares model on the full list of instruments. The null hypothesis is that all the instruments are valid, and suspicion is thrown on this hypothesis if the auxiliary regression has a significant degree of explanatory power. For a good explanation of both tests see chapter 8 of <@bib="Davidson and MacKinnon (2004);davidson-mackinnon04">. 

For both TSLS and LIML estimation, an additional test result is shown provided that the model is estimated under the assumption of i.i.d. errors (that is, the <@opt="--⁠robust"> option is not selected). This is a test for weakness of the instruments. Weak instruments can lead to serious problems in IV regression: biased estimates and/or incorrect size of hypothesis tests based on the covariance matrix, with rejection rates well in excess of the nominal significance level <@bib="(Stock, Wright and Yogo, 2002);stock-wright-yogo02">. The test statistic is the first-stage <@itl="F">-test if the model contains just one endogenous regressor, otherwise it is the smallest eigenvalue of the matrix counterpart of the first stage <@itl="F">. Critical values based on the Monte Carlo analysis of <@bib="Stock and Yogo (2003);stock-yogo03"> are shown when available. 

The R-squared value printed for models estimated via two-stage least squares is the square of the correlation between the dependent variable and the fitted values. 

For details on the effects of the <@opt="--⁠robust"> and <@opt="--⁠cluster"> options, please see the help for <@ref="ols">. 

As alternatives to TSLS, the model may be estimated via Limited Information Maximum Likelihood (the <@opt="--⁠liml"> option) or via the Generalized Method of Moments (<@opt="--⁠gmm"> option). Note that if the model is just identified these methods should produce the same results as TSLS, but if it is over-identified the results will differ in general. 

If GMM estimation is selected, the following additional options become available: 

<indent>
• <@opt="--⁠two-step">: perform two-step GMM rather than the default of one-step. 
</indent>

<indent>
• <@opt="--⁠iterate">: Iterate GMM to convergence. 
</indent>

<indent>
• <@opt="--⁠weights="><@var="Wmat">: specify a square matrix of weights to be used when computing the GMM criterion function. The dimension of this matrix must equal the number of instruments. The default is an appropriately sized identity matrix. 
</indent>

Menu path: /Model/Instrumental variables

# var Estimation

Arguments: 	<@var="order"> <@var="ylist"> [ ; <@var="xlist"> ] 
Options: 	<@lit="--nc"> (do not include a constant)
		<@lit="--trend"> (include a linear trend)
		<@lit="--seasonals"> (include seasonal dummy variables)
		<@lit="--robust"> (robust standard errors)
		<@lit="--robust-hac"> (HAC standard errors)
		<@lit="--quiet"> (skip output of individual equations)
		<@lit="--silent"> (don't print anything)
		<@lit="--impulse-responses"> (print impulse responses)
		<@lit="--variance-decomp"> (print variance decompositions)
		<@lit="--lagselect"> (show criteria for lag selection)
Examples: 	<@lit="var 4 x1 x2 x3 ; time mydum">
		<@lit="var 4 x1 x2 x3 --seasonals">
		<@lit="var 12 x1 x2 x3 --lagselect">

Sets up and estimates (using OLS) a vector autoregression (VAR). The first argument specifies the lag order — or the maximum lag order in case the <@opt="--⁠lagselect"> option is given (see below). The order may be given numerically, or as the name of a pre-existing scalar variable. Then follows the setup for the first equation. Do not include lags among the elements of <@var="ylist"> — they will be added automatically. The semi-colon separates the stochastic variables, for which <@var="order"> lags will be included, from any exogenous variables in <@var="xlist">. Note that a constant is included automatically unless you give the <@opt="--⁠nc"> flag, a trend can be added with the <@opt="--⁠trend"> flag, and seasonal dummy variables may be added using the <@opt="--⁠seasonals"> flag. 

While a VAR specification usually includes all lags from 1 to a given maximum, it is possible to select a specific set of lags. To do this, substitute for the regular (scalar) <@var="order"> argument either the name of a predefined vector or a comma-separated list of lags, enclosed in braces. We show below two ways of specifying that a VAR should include lags 1, 2 and 4 (but not lag 3): 

<code>          
   var {1,2,4} ylist
   matrix p = {1,2,4}
   var p ylist
</code>

A separate regression is reported for each variable in <@var="ylist">. Output for each equation includes <@itl="F">-tests for zero restrictions on all lags of each of the variables, an <@itl="F">-test for the significance of the maximum lag, and, if the <@opt="--⁠impulse-responses"> flag is given, forecast variance decompositions and impulse responses. 

Forecast variance decompositions and impulse responses are based on the Cholesky decomposition of the contemporaneous covariance matrix, and in this context the order in which the (stochastic) variables are given matters. The first variable in the list is assumed to be "most exogenous" within-period. The horizon for variance decompositions and impulse responses can be set using the <@ref="set"> command. For retrieval of a specified impulse response function in matrix form, see the <@xrf="irf"> function. 

If the <@opt="--⁠robust"> option is given, standard errors are corrected for heteroskedasticity. Alternatively, the <@opt="--⁠robust-hac"> option can be given to produce standard errors that are robust with respect to both heteroskedasticity and autocorrelation (HAC). In general the latter correction should not be needed if the VAR includes sufficient lags. 

If the <@opt="--⁠lagselect"> option is given, the first parameter to the <@lit="var"> command is taken as the maximum lag order. Output consists of a table showing the values of the Akaike (AIC), Schwartz (BIC) and Hannan–Quinn (HQC) information criteria computed from VARs of order 1 to the given maximum. This is intended to help with the selection of the optimal lag order. The usual VAR output is not presented. The table of information criteria may be retrieved as a matrix via the <@lit="$test"> accessor. 

Menu path: /Model/Time series/Vector autoregression

# varlist Dataset

Options: 	<@lit="--scalars"> (list scalars)
		<@lit="--accessors"> (list accessor variables)

By default, prints a listing of the (series) variables currently available. <@lit="list"> and <@lit="ls"> are synonyms. 

If the <@opt="--⁠scalars"> option is given, prints a listing of any currently defined scalar variables and their values. Otherwise, if the <@opt="--⁠accessors"> option is given, prints a list of the internal variables currently available via accessors such as <@xrf="$nobs"> and <@xrf="$uhat">. 

# vartest Tests

Arguments: 	<@var="series1"> <@var="series2"> 

Calculates the <@itl="F"> statistic for the null hypothesis that the population variances for the variables <@var="series1"> and <@var="series2"> are equal, and shows its p-value. 

Menu path: /Tools/Test statistic calculator

# vecm Estimation

Arguments: 	<@var="order"> <@var="rank"> <@var="ylist"> [ ; <@var="xlist"> ] [ ; <@var="rxlist"> ] 
Options: 	<@lit="--nc"> (no constant)
		<@lit="--rc"> (restricted constant)
		<@lit="--uc"> (unrestricted constant)
		<@lit="--crt"> (constant and restricted trend)
		<@lit="--ct"> (constant and unrestricted trend)
		<@lit="--seasonals"> (include centered seasonal dummies)
		<@lit="--quiet"> (skip output of individual equations)
		<@lit="--silent"> (don't print anything)
		<@lit="--impulse-responses"> (print impulse responses)
		<@lit="--variance-decomp"> (print variance decompositions)
Examples: 	<@lit="vecm 4 1 Y1 Y2 Y3">
		<@lit="vecm 3 2 Y1 Y2 Y3 --rc">
		<@lit="vecm 3 2 Y1 Y2 Y3 ; X1 --rc">
		See also <@inp="denmark.inp">, <@inp="hamilton.inp">

A VECM is a form of vector autoregression or VAR (see <@ref="var">), applicable where the variables in the model are individually integrated of order 1 (that is, are random walks, with or without drift), but exhibit cointegration. This command is closely related to the Johansen test for cointegration (see <@ref="coint2">). 

The <@var="order"> parameter to this command represents the lag order of the VAR system. The number of lags in the VECM itself (where the dependent variable is given as a first difference) is one less than <@var="order">. 

The <@var="rank"> parameter represents the cointegration rank, or in other words the number of cointegrating vectors. This must be greater than zero and less than or equal to (generally, less than) the number of endogenous variables given in <@var="ylist">. 

<@var="ylist"> supplies the list of endogenous variables, in levels. The inclusion of deterministic terms in the model is controlled by the option flags. The default if no option is specified is to include an "unrestricted constant", which allows for the presence of a non-zero intercept in the cointegrating relations as well as a trend in the levels of the endogenous variables. In the literature stemming from the work of Johansen (see for example his 1995 book) this is often referred to as "case 3". The first four options given above, which are mutually exclusive, produce cases 1, 2, 4 and 5 respectively. The meaning of these cases and the criteria for selecting a case are explained in <@pdf="the Gretl User's Guide">. 

The optional lists <@var="xlist"> and <@var="rxlist"> allow you to specify sets of exogenous variables which enter the model either unrestrictedly (<@var="xlist">) or restricted to the cointegration space (<@var="rxlist">). These lists are separated from <@var="ylist"> and from each other by semicolons. 

The <@opt="--⁠seasonals"> option, which may be combined with any of the other options, specifies the inclusion of a set of centered seasonal dummy variables. This option is available only for quarterly or monthly data. 

The first example above specifies a VECM with lag order 4 and a single cointegrating vector. The endogenous variables are <@lit="Y1">, <@lit="Y2"> and <@lit="Y3">. The second example uses the same variables but specifies a lag order of 3 and two cointegrating vectors; it also specifies a "restricted constant", which is appropriate if the cointegrating vectors may have a non-zero intercept but the <@lit="Y"> variables have no trend. 

Following estimation of a VECM some special accessors are available: <@lit="$jalpha">, <@lit="$jbeta"> and <@lit="$jvbeta"> retrieve, respectively, the α and β matrices and the estimated variance of β. For retrieval of a specified impulse response function in matrix form, see the <@xrf="irf"> function. 

Menu path: /Model/Time series/VECM

# vif Tests

Must follow the estimation of a model which includes at least two independent variables. Calculates and displays the Variance Inflation Factors (VIFs) for the regressors. The VIF for regressor <@itl="j"> is defined as 

  <@fig="vif">

where <@itl="R"><@sub="j"> is the coefficient of multiple correlation between regressor <@itl="j"> and the other regressors. The factor has a minimum value of 1.0 when the variable in question is orthogonal to the other independent variables. <@bib="Neter, Wasserman, and Kutner (1990);neter-etal90"> suggest inspecting the largest VIF as a diagnostic for collinearity; a value greater than 10 is sometimes taken as indicating a problematic degree of collinearity. 

Menu path: Model window, /Tests/Collinearity

# wls Estimation

Arguments: 	<@var="wtvar"> <@var="depvar"> <@var="indepvars"> 
Options: 	<@lit="--vcv"> (print covariance matrix)
		<@lit="--robust"> (robust standard errors)
		<@lit="--quiet"> (suppress printing of results)

Computes weighted least squares (WLS) estimates using <@var="wtvar"> as the weight, <@var="depvar"> as the dependent variable, and <@var="indepvars"> as the list of independent variables. Let <@var="w"> denote the positive square root of <@lit="wtvar">; then WLS is basically equivalent to an OLS regression of <@var="w"> <@lit="*"> <@var="depvar"> on <@var="w"> <@lit="*"> <@var="indepvars">. The <@itl="R">-squared, however, is calculated in a special manner, namely as 

  <@fig="wlsr2">

where ESS is the error sum of squares (sum of squared residuals) from the weighted regression and WTSS denotes the "weighted total sum of squares", which equals the sum of squared residuals from a regression of the weighted dependent variable on the weighted constant alone. 

If <@var="wtvar"> is a dummy variable, WLS estimation is equivalent to eliminating all observations with value zero for <@var="wtvar">. 

Menu path: /Model/Other linear models/Weighted Least Squares

# xcorrgm Statistics

Arguments: 	<@var="series1"> <@var="series2"> [ <@var="order"> ] 
Option: 	<@lit="--plot">=<@var="mode-or-filename"> (see below)
Example: 	<@lit="xcorrgm x y 12">

Prints and graphs the cross-correlogram for <@var="series1"> and <@var="series2">, which may be specified by name or number. The values are the sample correlation coefficients between the current value of <@var="series1"> and successive leads and lags of <@var="series2">. 

If an <@var="order"> value is specified the length of the cross-correlogram is limited to at most that number of leads and lags, otherwise the length is determined automatically, as a function of the frequency of the data and the number of observations. 

By default, a plot of the cross-correlogram is produced: a gnuplot graph in interactive mode or an ASCII graphic in batch mode. This can be adjusted via the <@opt="--⁠plot"> option. The acceptable parameters to this option are <@lit="none"> (to suppress the plot); <@lit="ascii"> (to produce a text graphic even when in interactive mode); <@lit="display"> (to produce a gnuplot graph even when in batch mode); or a file name. The effect of providing a file name is as described for the <@opt="--⁠output"> option of the <@ref="gnuplot"> command. 

Menu path: /View/Cross-correlogram
Other access: Main window pop-up menu (multiple selection)

# xtab Statistics

Arguments: 	<@var="ylist"> [ ; <@var="xlist"> ] 
Options: 	<@lit="--row"> (display row percentages)
		<@lit="--column"> (display column percentages)
		<@lit="--zeros"> (display zero entries)
		<@lit="--matrix">=<@var="matname"> (use frequencies from named matrix)

Displays a contingency table or cross-tabulation for each combination of the variables included in <@var="ylist">; if a second list <@var="xlist"> is given, each variable in <@var="ylist"> is cross-tabulated by row against each variable in <@var="xlist"> (by column). Variables in these lists can be referenced by name or by number. Note that all the variables must have been marked as discrete. Alternatively, if the <@opt="--⁠matrix"> option is given, treat the named matrix as a precomputed set of frequencies and display this as a cross-tabulation. 

By default the cell entries are given as frequency counts. The <@opt="--⁠row"> and <@opt="--⁠column"> options (which are mutually exclusive), replace the counts with the percentages for each row or column, respectively. By default, cells with a zero count are left blank; the <@opt="--⁠zeros"> option, which has the effect of showing zero counts explicitly, may be useful for importing the table into another program, such as a spreadsheet. 

Pearson's chi-square test for independence is displayed if the expected frequency under independence is at least 1.0e-7 for all cells. A common rule of thumb for the validity of this statistic is that at least 80 percent of cells should have expected frequencies of 5 or greater; if this criterion is not met a warning is printed. 

If the contingency table is 2 by 2, Fisher's Exact Test for independence is computed. Note that this test is based on the assumption that the row and column totals are fixed, which may or may not be appropriate depending on how the data were generated. The left p-value should be used when the alternative to independence is negative association (values tend to cluster in the lower left and upper right cells); the right p-value should be used if the alternative is positive association. The two-tailed p-value for this test is calculated by method (b) in section 2.1 of <@bib="Agresti (1992);agresti92">: it is the sum of the probabilities of all possible tables having the given row and column totals and having a probability less than or equal to that of the observed table. 

